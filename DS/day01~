
	DATESTRUCTURE
1、老师
	老师 马如忠 Maruzhong/ruzhong Ma
	小马哥	
	
	marz@tedu.cn

2、学习方法
	(1)课堂以听懂为主，尽量记笔记和代码;
	(2)程序员是代码喂出来的;
	(3)永久性的作业:苦练指法
 
3、课程简介
	(1)数据结构
	  栈，队列，链表，二叉树
	(2)算法
	  2种查找算法 + 4种排序算法
	(3)课程时间
	  时间 4 ~ 5 天
	(4)注意事项
   	  重点理解数据结构的特性以及算法的思想。

 ************************************************






/**************************************************************************/
*									   *		
*				day_01					   *	
*									   *
/**************************************************************************/



	1、数据结构的概念和分类
	2、栈的基本特征和基本操作




		/* 1. 数据结构的概念和分类 */
 
	如:
	   编程实现输入5个学生成绩并计算总成绩和平均成绩？？？
		int scores[5];

	/*数组名表示数组的首地址，也就是数组中第一个元素的首地址，
	  数组名是个常量，不可改变；*/
		scores = &scores[0];
	通过数组名加下标的方式可以访问连续内存中的任意一块区域，
         但是切记不要越界访问；
	
	scores[2] <=> *(scores + 2) <=> *(2 + scores) <=> 2[scores]
					//笔试题！
		


1.1 基本概念
	在计算机中，/*数据结构*/就是指数据在计算机中的存储和组织形式，
        	也就是一种或者多种特定关系的数据的集合。

	一般来说，数据结构的选择会直接影响到程序的执行效率(时间复杂度)和存储效率(空间复杂度) 
	
//	计算机程序 = 数据结构 + 算法;



1.2 数据结构的三个层次
	1)逻辑结构 (集合结构、线性结构、树型结构、网状结构)
	  	-主要描述数据元素之间的逻辑关系；


	2)物理结构 (顺序结构、链式结构)
		-主要描述数据元素在计算机中的存储形式，也就是位置关系；


	3)运算结构
		-主要描述数据结构的实现方式以及基本特征；


1.3 逻辑结构的分类

	1)集合结构
		-主要描述所有数据元素都属于一个整体，不强调数据元素之间的关系；
		【e.g.】
			-CSD1602班 
			-2 3 5 7 11 13 17 ... 统称为 质数/素数
			

	2)线性结构
		-主要描述数据元素之间存在一对一的前后关系；

		该结构中有且仅有唯一的首元素,有且仅有唯一的尾元素。
		除首元素之外，结构中每个元素有且仅有一个前驱元素，
		除尾元素之外，结构中每个元素有且仅有一个后继元素。
		
		【e.g.】
			等公交/地铁时排的队伍
			
	3)树型结构
		-足要描述结构中的数据元素之间存在一对多的父子关系；
		
		-该结构中存在唯一的根元素，也就是起始元素。//		A
		-其中该结构中顶端的元素叫做叶元素。	//	       / \
							//	      B   C
							//	     / \
								    D   E
		除了根元素之外，结构中的每个元素有且只有一个前趋元素；
		出来叶元素之外，结构中的每个元素可以拥有一个或多个后继元素；


	4)图形结构/网状结构
		-主要描述数据元素之间存在多对多的交叉映射结构。
		-该结构中的每个元素都可以有多个前趋和多个后继元素；
		-该结构中的任意两个元素之间都可以建立关联；





1.4 物理结构分类
	
	1)顺序结构
		-主要描述采用一组连续的存储但愿一次存储逻辑上相邻的各个元素，
		如果每个元素都具有相同的属性，则每个元素占用的存储空间相同。
	
		-物理结构中的顺序结构可以采用C语言中的数组类型加以描述；



思考:
	该结构有什么优点以及缺点？？？
	
优点:
	a.支持下标访问，实现/*随机访问*/也比较方便。

	b.除了申请存储数据元素本身之外的存储空间，不需要额外的存储空间来表达数据元素之间的逻辑关系，
	  因此比较//节省内存。

缺点:
	a.申请连续的存储空间时需要预知元素的个数来确定存储空间的大小，
	  若太小则可能不够，若太大则可能造成浪费。

	b.要求申请连续的存储空间，导致小块空闲区域无法有效利用，因此整个内存空间的利用率比较低。

	c.当插入或删除元素时，可能会导致大量数据元素的移动，因此执行效率比较低。





	2)链式结构
		-主要描述采用一组地址不连续的存储单元来依次存放各个元素，
		 不保证逻辑上相邻的元素在物理位置上也连续。
	
		-为每个元素构造一个节点，而节点中的内容包括两部分：
			存储数据元素本身 + 记录下一个节点的首地址。

		-该结构无法使用C语言中的数据类型加以描述，因此需要程序员
		   手动编码去实现该结构；

思考：

	该结构的优点，缺点。


优点：
	a.不需要预知元素的个数，而是使用动态内存，
	  为每个元素构造节点，或者释放节点。
	
	b.不需要申请连续的存储空间，因此空间利用率比较高。

	c.插入或删除元素时比较方便，不需要移动其他元素的位置。

缺点：
	
	a.不支持下标访问，随机访问也不方便。

	b.除了申请存放数据元素本身的存储空间之外，还需要申请额外的存储空间
	  表达数据元素之间的逻辑关系，也就是记录下一个节点的地址，因此比较消耗内存空间。



1.5 逻辑结构和物理结构之间的关系

	每种逻辑结构采用何种物理结构来实现并没有具体的规定，通常根据实现的难易程度，
	以及在时间复杂度和空间复杂度等方面的考虑，来选择合适的物理结构，也不排除
	同一种逻辑结构需要使用多种物理结构实现的可能；



1.6 运算结构
	主要描述数据结构的创建，销毁，增删改查以及相关的算法使用。








			/* 2. 栈 Statck */
2.1 基本概念
	-栈就是一种具有后进先出特性的数据结构，简称LIFO(Last In First Out)

	1)栈顶，允许进行插入、删除操作的一端。
	2)栈属于逻辑结构中的线性结构。


2.2 基本操作
	创建(stack_create) 
	销毁(stack_destroy)
	判断是否为空(stack_empty)
	判断是否为满(stack_full)	
	入栈(stack_push)
	出栈(stack_pop)				
	查看栈顶元素(stack_peek)
	计算栈中有效元素个数(stack_size)
	遍历栈中所有元素(stack_travel)		//把所有元素打印出来
	清空栈(stack_clear)


2.3 使用顺序结构实现栈的基本操作

//使用顺序结构实现栈的基本操作
#include <stdio.h>
#include <stdlib.h>
//定义栈的数据类型
typedef struct{
//  int arr[5];
    int* arr;
    int len;//记录数组中可以存放的元素个数
    int pos;//记录数组下标
}Stack;
//实现栈的创建
Stack* stack_create(int len);
//实现栈的销毁
void stack_destroy(Stack* ps);

//判断栈是否为空
int stack_empty(Stack* ps);
//判断栈是否为满
int stack_full(Stack* ps);

int main(void)
{
	//创建栈，调用stack_create函数
	Stack* ps = stack_create(5);

	printf("%s\n",stack_empty(ps)?"栈已经空了":"栈没有空"); // 栈已经空了
	printf("%s\n",stack_full(ps)?"栈已经满了":"栈没有满"); // 栈没有满


	//销毁栈，调用stack_destroy函数
	stack_destroy(ps);
	ps = NULL;
	return 0;
}

//判断栈是否为空
int stack_empty(Stack* ps)
{
	return 0 == ps->pos;
}

//判断栈是否为满
int stack_full(Stack* ps)
{
	return ps->len == ps->pos;
}
//销毁
void stack_destroy(Stack* ps){
    free(ps->arr);
    ps->arr = NULL;
    free(ps);
    ps = NULL;
}
//创建
Stack* stack_create(int len){
    //1 创建栈 
//  Stack stack;    //局部变量  error
//  return &stack;  //永远不要返回局部变量的地址
//使用static关键字进行修饰   error~
    Stack* ps = (Stack*)malloc(sizeof(Stack));//动态内存分配
    if(NULL == ps){
        printf("创建栈失败，程序结束\n");
        exit(-1);//异常终止整个程序
    }

    //2 初始化栈中的所有成员
    ps->arr = (int*)malloc(sizeof(int)*len);
    if(NULL == ps->arr){
        printf("创建栈失败，程序结束\n");
        exit(-1);
    }
    ps->len = len;
    ps->pos = 0;
    //3  返回栈的首地址             a
    return ps;
}

	







***************************************
作业：
	编程实现顺序结构栈中的基本操作；

预习：
	1、栈
	2、队列











