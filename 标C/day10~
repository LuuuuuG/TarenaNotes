/**************************************************************************/
*									   *		
*				day_10					   *	
*									   *
/**************************************************************************/

	一、指针变量
	二、字符串
	三、字符串字面值





			/*一、指针变量*/  /*pointer*/
	1、只有记录有效地址的指针才能使用。
	2、有效指针变量前加*可以表示捆绑的存储区。
	3、指针变量也分类型，不同类型的指针适合与不同类型的存储区捆绑。
	4、可以在一条语句里声明多个同类项指针，每个指针变量名称前单独加‘*’
	5、没有捆绑的指针分为两类：
		1、空指针里记录固定地址(空地址，用NULL表示，数值为0)
		2、除了空指针以外的没有捆绑的指针都叫野指针。
	6、程序中禁止出现野指针。
	7、所有指针必须初始化。指针变量初始化过程中‘*’不参与赋值。

************
//指针演示
#include <stdio.h>
int main(){
    int num = 0;
    int *p_num = &num,*p_num1 = NULL;   //所有指针必须初始化，避免野指针！
    *p_num = 10;         // *用来找到num的存储区
    printf("num is %d\n",num);
    return 0;
}
*****************

【练习】
 	从键盘得到三个整数，从大到小输出


//从键盘得到三个整数，从大到小输出
#include<stdio.h>

int main(){
    int num1 = 0,num2 = 0,num3 = 0,tmp = 0;
    int *p_num1 = &num1,*p_num2 = &num2,*p_num3 = &num3,*p_tmp = &tmp; 
    //声明三个指针变量分别和三个数字捆绑。
    printf("plz input three numbers:");
    scanf("%d%d%d",p_num1,p_num2,p_num3);
    if(*p_num1 < *p_num2){
        *p_tmp = *p_num1;
        *p_num1 = *p_num2;   //赋值语句如果不加‘*’
        *p_num2 = *p_tmp;    //则指针和数字之间的捆绑关系就变了。
    }   
    if(*p_num1 < *p_num3){
        *p_tmp = *p_num1;
        *p_num1 = *p_num3;
        *p_num3 = *p_tmp;
    }   
    if(*p_num2 < *p_num3){
        *p_tmp = *p_num2;
        *p_num2 = *p_num3;
        *p_num3 = *p_tmp;
    }   
    printf("Numbers from bigger to smaller: %d %d %d\n",*p_num1,*p_num2,*p_num3);
    return 0;
}

*************************************


	8、指针变量和普通变量之间的捆绑关系可以随着程序的执行不断变化。
	9、可以把指针看作普通变量的某种身份，
		可以使用指针实现针对身份编程。
	10、用一个指针和数组里第一个存储区捆绑，
	    就可以通过这个指针找到数组里每个存储区，
	    此时可以认为指针间接捆绑了数组里的所有存储区。
	11、地址数据可以参与如下计算：
		a.地址 + 整数
		b.地址 - 整数
		c.地址 - 地址
	
	12、地址加减整数n实际加减的是n个捆绑存储区的大小



***************	
//地址数据演示
#include<stdio.h>

int main(){
    int arr[5] = {1,2,3,4,5};
    printf("arr is %p\narr + 2 is %p\n",arr,arr + 2); 
    return 0;

}
*************
arr is 0xbf8589fc
arr + 2 is 0xbf858a04

结果相差 8 个字节
***********


	13、地址减地址的结果是一个整数，这个结果表示两个地址之间捆绑存储区的个数。
		printf("&arr[2] - arr is %d\n",&arr[2] - arr);
	


****************

//指针和数组的关系
#include<stdio.h>

int main(){
    int arr[5] = {1,2,3,4,5};
    int *p_num = arr ; //用数组名称对指针初始化。
    int num = 0;
    for(num = 0;num <= 4;num++){
        printf("%d ",arr[num]);   // ok
        printf("%d ",*(arr + num));  //bad
        printf("%d ",p_num[num]);  // not good
        printf("%d ",*(p_num + num));  //best
    }   
    printf("\n");
    return 0;
}

****************************

	14、所有跨函数使用存储区都是通过指针实现的。
	15、数组做形参的时候真正的形参是一个指针变量。

【练习】
用指针做形参将数组的内容打印在屏幕上
【Gang】
//用指针做形参将数组的内容打印在屏幕上

#include<stdio.h>
void print(int *p_num){
    int num = 0;
    for (num = 0;num <= 4;num++){

    printf("%d ",*(p_num + num));
    }   
}

int main(){
    int num = 0;
    int arr[5] = {1,2,3,4,5};
    int *p_num = arr;
    print(p_num);
    printf("\n");
    return 0;
}


*******************
【练习】

编写程序 把调用函数中两个变量内容交换

#include<stdio.h>
void swap(int *p_num1,int*p_num2){
    int tmp = *p_num1;
    *p_num1 = *p_num2;
    *p_num2 = tmp;

}

int main(){
    int num1 = 3,num2 = 7;
    swap(&num1,&num2);
    printf("num1 = %d num2 = %d\n",num1,num2);
    return 0;
}


	16、指针存储区可以用来存放函数的返回值。
		这样可以让调用函数使用被调用函数提供的存储区。
	17、不可以把非静态局部变量的地址作为返回值(生命周期太短！)


//指针返回值演示
#include<stdio.h>
int *read(void){
    static int num;   //静态局部变量不可以初始化。。
    printf("plz input a number:");
    scanf("%d",&num);
    return &num;

}

int main(){
    int *p_num = read();
    printf("%d\n",*p_num);
    return 0;
}




	const 关键字可以用来声明变量，多数情况下用来声明指针。

	1、声明指针变量的时候可以把 const 关键字写在/*类型名称*/前，
		表示不可以通过指针对捆绑存储区进行赋值，但可以对指针本身的存储区进行赋值。

******************
//const关键字演示
#include<stdio.h>

int main(){ 
    int num = 0;
    const int *p_num = &num;
//  *p_num = 10; 不能通过指针对捆绑存储区赋值；
    p_num = NULL;   //可以对指针本身的存储区赋值
    return 0;
}
	
*************************

	2、指针形参要尽量采用上面的方式加const关键字。
	3、可以在声明指针变量的时候把 const 关键字写在/*指针变量名称*/前，
	   可以通过这种指针对捆绑存储区做赋值，但是不可以对指针本身做赋值。


***********************
//const关键字演示
#include<stdio.h>
int main(){ 
    int num = 0;
    const int *p_num = &num;
//  *p_num = 10;    //不能通过指针对捆绑存储区赋值；
    p_num = NULL;   //可以对指针本身的存储区赋值
    
    int const p_num1 = &num;
    *p_num1 = 10;   //可以对对指针捆绑存储区做赋值
//  p_num1 = NULL;  //不能对指针本身做赋值。
    return 0;
}
********************
	
	4、可以在声明指针变量时使用 void 作为类型名称，称为/*无类型指针*/。
	5、这种指针可以和任意类型存储区捆绑。不能通过这种指针做的捆绑存储区的类型。
	6、这种指针不可以直接在前面加*来使用。
	7、这种指针必须首先强制类型转换成有类型指针，然后才能在前面加*表示捆绑存储区。

***************	
//无类型指针演示
#include<stdio.h>
int main(){
    char ch = 'a';
    int num = 20; 
    float fnum = 5.4f;
    void *p_v = NULL;
    p_v = &ch;
    printf("%c\n",*(char *)p_v);  //强制类型转换
    p_v = &num;
    printf("%d\n",*(int *)p_v);
    p_v = &fnum;
    printf("%g\n",*(float *)p_v);
    return 0;
}
*******************
运行结果：
a
20
5.4
*******************

	8、无类型指针通常作为形参使用，可以通过它把任意类型的存储区传递给被调用函数。
	
************************************************************************



			/*二、字符串*/
	
	1、C语言里所有文字信息必须存储在一组连续的字符类型存储区里。
	2、所有文字信息必须以‘\0’作为结尾，这个字符的ASCII码就是数字 0 。
		  符合以上特征的内容叫做/*字符串*/。
	3、字符串里‘\0’字符前面的部分是有效字符。
	4、所有字符串一定可以采用字符类型指针表示。








			/*三、字符串字面值*/
	1、用两个双引号中间的一组字符表示，例如："abc","^&%" ...
	2、编译器在编译的时候会自动在字符串字面值后面加上'\0'字符。
	3、编译器编译时会吧字符串字面值替换成第一个字符所在存储区的地址。
	4、字符串面值的内容在程序执行过程中不可以改变。


*************
//字符串演示
#include <stdio.h>

int main(){
    printf("%p\n","abc");      // 字符a的地址
    printf("%p\n","abc" + 3);  // \0 地地址
    printf("%d\n",*("abc" + 3)); // 寻址 结果为0
//  *"abc" = 'x';       // 将a换为x 出现错误！
    return 0;
}

*************

	5、程序中多个内容一样的字符串字面值在程序执行的时候其实是同一个。
	6、并列写在一起的多个字符串面值会被编译器合并成一个。
	7、字符数组也可以用来表示字符串。只有包含'\0'字符的字符数组才可以代表字符串。
	8、可以采用字符字面值对字符数组进行初始化，
 	   这个时候字符串字面值里的'\0'字符也会被初始化到字符数组里。

	9、字符数组里的字符串内容可以修改。

	10、可以用 %s 作为占位符把字符串里的所有字符显示在屏幕上。

*****************

int main(){
    char str[] = "xyz";
    printf("sizeof(str) is %d\n",sizeof(str));
    str[0] = 'a';
    printf("%s\n",str);
    return 0;
}
***************




作业：
	编写函数把一个数组里的所有存储区内容前后颠倒。
		如数组里原有内容是 1 2 3 4 5 
		颠倒后的内容为 5 4 3 2 1 
	要求用返回值表示处理后的数组，用指针编写程序。


【Gang】
int reverse(int *p_num){
    int num = 0;
    int arr[5] = {0}; 
    for (num = 0;num <= 4;num++){
         arr[4 - num] = *(p_num + num);
    }   
    for(num = 0;num <= 4;num++){
        printf("%d ",arr[num]);
    }   
}
int main(){
    int arr[] = {1,2,3,4,5};
    reverse(arr);
    printf("\n");

    return 0;
}

//Mr.Yang

// task of pointers
#include<stdio.h>
int *reverse(int *p_num,int size){
    int tmp = 0;
    int *p_start = p_num;           //数组第一个存储区
    int *p_end = p_num + size - 1;  //数组最后一个存储区

    while (p_start < p_end){    
        tmp = *p_start;             //交换头尾指针内容
        *p_start = *p_end;
        *p_end = tmp;
        p_start++;
        p_end--;
    }   
    return p_num;
}

int main(){
    int num = 0;
    int arr[] = {1,2,3,4,5};
    int *p_num = reverse(arr,5);
    for(num = 0;num <= 4;num++){
        printf("%d ",*(p_num + num));
    }   
    printf("\n");
    return 0;
}
















































	





























	

































