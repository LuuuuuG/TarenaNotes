/**************************************************************************/
*									   *		
*				day_06					   *	
*									   *
/**************************************************************************/	

		

			/*一、随机数*/

	不可与之的数字叫做//随机数，
	Rand标准函数需要包含stdlib.h头文件。

	Srand 标准函数设置随机数种子
	它可以把一个整数当作种子使用
	为了使用这个标准函数需要包含stdlib.h头文件

	为了使用这个标准函数需要包含time.h 头文件

  1 //随机数rand
  2 #include <stdio.h>
  3 #include <stdlib.h>
  4 int main(){
  5     int num = 0;
  6     printf("num = %d\n",rand());
  7     printf("num = %d\n",rand());
  8     printf("num = %d\n",rand());
  9     return 0;
 10 }



  1 //srand
  2 #include <stdio.h>
  3 #include <stdlib.h>
  4 #include <time.h>
  5 int main(){
  6     int num = 0;
  7     srand(time(0));//设置随即的算法种子
  8     printf("num = %d\n",rand());
  9     printf("num = %d\n",rand());
 10     printf("num = %d\n",rand());
 11     
 12     return 0;
 13 } 

**********************************************

【练习】
编写猜数游戏，计算机里产生一个1到100之间的随机数，
然后让用户猜，每次猜完都要给出提示
直到猜对程序为止。

【Gang】
  1 /*
  2 编写猜数游戏，计算机里产生一个1到100之间的随机数，
  3 然后让用户猜，每次猜完都要给出提示
  4 直到猜对程序为止。
  5 */
  6 #include <stdio.h>
  7 #include <stdlib.h>
  8 #include <time.h>
  9 
 10 int main(){
 11     int num = 0,guess = 0;
 12     srand(time(0));
 13     num = rand() %100 + 1;
 14     for (;;){
 15     printf("Input a number:");
 16     scanf("%d",&guess);
 17         if(guess > num){
 18             printf("Bigger!\n");
 19         }
 20         else if(guess < num){
 21             printf("Smaller!\n");
 22         }
 23         else{
 24             printf("congratulation!\n");
 25             break;
 26         }
 27     }
 28     return 0;
 29 }  




**********************************************

			/*二、控制语句*/

	1、分支和循环可以让程序和从的语句不再从上到下顺序执行。


 	2、goto 语句可以把任何一条语句指定为下一条语句,一般不要使用goto语句。

	
	//多重循环
	1、循环里面还可以包含其他循环。
	2、如果一个问题可以划分为多个小问题，每个小问题可以采用类似的循环解决，
		这种问题可以采用多重循环解决。

  1 //多重循环演示
  2 
  3 #include <stdio.h>
  4     int main(){
  5     int i = 0,j = 0;
  6     for (i = 1;i <= 5;i++){
  7         for(j = 5;j >= i;j--){
  8             printf("%d",j);
  9         }
 10         printf("\n");
 11     }
 12     return 0;
 13 }
	
	
	


**************************************
【练习】

	有一种货币包含三种面值，分别是1元，2元和5元。
	编写程序把这种货币里所有10元的可能性找到并打印在屏幕上。



【Gang】

  1 /*有一种货币包含三种面值，分别是1元，2元和5元。
  2     编写程序把这种货币里所有10元的可能性找到并打印在屏幕上。
  3     */
  4 
  5 #include <stdio.h>
  6 
  7 int main(){
  8     int i = 0,j = 0,k = 0;
  9     for (i = 0;i <= 10;i++){
 10         for(j = 0;j <= 5;j++){
 11             for(k = 0;k <= 2;k++){
 12                 if((i + 2*j +5*k) == 10){
 13                     printf("一元%d张 两元%d张 五元%d张",i,j,k);
 14                 }
 15             }
 16         }
 17         printf("\n");
 18     }
 19     return 0;
 20 }


//Mr.Yang

  1 #include <stdio.h>
  2 
  3 int main(){
  4     int i = 0,j = 0;
  5     for (i = 0;i <= 5;i++){   //i表示两元
  6         for(j = 0;j <= 2;j++){ //j表示五元
  7                 if(2*i +5*j <= 10){
  8                     printf("一元%d张 两元%d张 五元%d张\n",10 - 2*i - 5*j,i,j    );                  
  9                 }
 10             }   
 11         }   
 12     return 0;
 13 } 



*****************************************************************************


		/*三、while 循环	（先判断，后执行） */
	1、while 和 for 循环可以互相转换。
	2、编写程序时，不能计算出要执行的次数时，可以考虑采用while循环。
	3、while 格式：
		while (逻辑表达式){
			语句
		}
	4、只要逻辑表达式为真，就会反复执行大括号里面的语句。
	5、如果逻辑表达式永远为真，这个逻辑表达式就是一个死循环。
	6、while 里面也可以使用 break 和 continue 语句
	7、while 循环交替执行逻辑表达式和大括号里面的语句，第一步做逻辑表达式的判断。
	8、如果第一步判断逻辑表达式结果为假，则循环立即结束，不执行大括号里面的语句。


  1 //first while 
  2 #include <stdio.h>
  3 int main(){
  4     int i = 1;
  5     while(i <=5){
  6         printf("%d\n",i);
  7         i++;
  8     }
  9     return 0;
 10 }


//while 循环实现猜数游戏
  1 //Game: guess number
  2 
  3 #include <stdio.h>
  4 #include <stdlib.h>
  5 
  6 
  7 /*int main(){
  8     int num = 0,guess = 0;
  9     srand(time(0));
 10     num = rand() % 100 + 1;
 11     printf("Input a number:");

 12     scanf("%d",&guess);
 13 
 14     while (guess < num){			//Gang
 15         printf("Smaller\n");
 16         printf("Input a number:");
 17         scanf("%d",&guess);
 18     }
 19 
 20     while (guess > num){
 21         printf("bigger\n");
 22         printf("Input a number:");
 23         scanf("%d",&guess);
 24     }
 25     
 26     while (guess == num){
 27         printf("congratulation!\n");
 28     }
 29     return 0;
 30 }*/
 31 
 32 int main(){
 33     int num = 0,guess = 0;
 34     srand(time(0));  //随机生成一个数字
 35     num = rand() % 100 + 1;
 36     while(guess != num){
 37         printf("Input a number:");
 38         scanf("%d",&guess);
 39 
 40         if (guess < num){
 41             printf("Smaller\n");
 42         }
 43         else if (guess > num){
 44             printf("Bigger\n");
 45         }
 46         else{
 47             printf("Congratulation\n");
 48         }
 49     }
 50 
 51     return 0;
 52 }


*****************************************************************************

		/*四、do ... while循环	（先执行，后判断）*/
	1、可以把 do ... while 格式看作是while循环的变体。
	2、小括号后面必须用分号结束。
	3、也交替执行大括号里面的语句和逻辑表达式，先执行括号里面的语句。
	4、do ... while 至少执行大括号里面的语句一次。
	


	//scanf 函数

	1、从键盘得到数字的时候，数字会首先进入输入缓冲区，然后再进入变量的存储区。
	2、先进入缓冲区的数字必须首先被处理。
	3、如果用户输入的格式和程序要求的格式不一致，就可能导致程序永远无法获得数字了。
	4、可以使用如下两条语句，丢掉用户某一次输入的所有内容：

		scanf("%*[^\n]");
		scanf("%*c");	


  1 //scanf
  2 
  3 #include <stdio.h>
  4 int main(){
  5     int num = 0,num1 = 0;
  6     printf("input a number:");
  7     scanf("%d",&num);
  8     scanf("%*[^\n]");   // 丢掉前面第一次
  9     scanf("%*c");       //输入的内容！！！
 10     printf("num is %d\n",num);
 11     printf("input a number:");
 12     scanf("%d",&num1);
 13     printf("num is %d\n",num1);
 14     return 0;
 15 }


*****************************************************************************

			/*五、printf 函数	*/

	1、printf现实数字的时候，数字首先进入输出缓冲区，然后彩绘现实在屏幕上。
	2、只在四种情况下输出缓冲区里的内容会显示在屏幕上：
		a.输出缓冲区里有'\n'字符。 
		b.程序结束。                                                //待验证！
		c.输出缓冲区被充满的时候。
		d.在程序中使用fflush(stdout)把前面放在输出缓冲区里的内容显示在屏幕上。
	5、scanf中含有fflush(stdout)函数。
		


*****************************************************************************

			/*六、数组*/

	1、数组可以用来代表内存中一组连续的同类型存储区。
	2、数组一旦存在则里面包含的存储区个数不可以改变。	
 	3、数组通常不会作为整体使用，一次通常只使用其中某个存储区。
	4、数组里每个存储区有一个编号，这个编号叫做数组的下标。
	5、第一个存储区的下标是 0 ，向后依次递增。
	6、下标范围从 0 到存储区个数减一为止，不可以使用超过范围的下标。
	7、数组名称加下标可以用来表示数组里的某个存储区。
	8、可以在for循环里让循环变量依次代表数组中每个存储区的下标，
		然后在循环中处理循环变量代表的存储区。
	9、数组初始化的时候：
		a.应该把所有初始化数据包含在一对大括号里，不同数据之间用逗号分开。
		b.如果初始化数据个数比存储区个数多，就把后面的初始化数据丢掉。
		c.如果初始化数据个数比存储区个数少，就把后面存储区初始化为 0 
		d.如果初始化数据个数跟存储区个数相等，就可以省略数组声明中的存储区个数~
			【e.g.】   int arr[] = {1,2,3,4,5}

















******************************************************************************

预习：
	变长数组、多维数组


作业：
	编写程序从键盘得到多个整数（数量不超过5个，反序打印，然后打印求和结果）

【Gang】
  1 //编写程序从键盘得到多个整数（数量不超过5个，反序打印，然后打印求和结果）
  2 #include <stdio.h>
  3 int main(){
  4     int a,b,c,d,e;
  5     int i = 0;
  6     int sum = 0;
  7     printf("Input five numbers:");
  8     scanf("%d%d%d%d%d",&a,&b,&c,&d,&e);
  9     int arr[5] = {a,b,c,d,e};
 10     for(i = 4;i >= 0;i--){
 11         printf("%d ",arr[i]);
 12         sum = sum + arr[i];
 13     }
 14         printf("sum = %d\n",sum);
 15     
 16     return 0;
 17 }

//Mr.Yang
 21 int main(){
 22     int arr[5] = {0},qty = 0,num = 0,pos = 4;
 23     int sum = 0;
 24     printf("Input counts of numbers:");
 25     scanf("%d",&qty);
 26     for (num = 1;num <= qty;num++){
 27         printf("Input a number:");
 28         scanf("%d",&arr[pos]);
 29         pos--;
 30     }   
 31     printf("\n");
 32     for(num = pos + 1;num <= 4;num++){
 33         printf("%d",arr[num]);
 34         sum += arr[num];
 35     }
 36 
 37     printf("Sun = %d\n",sum);
 38     return 0;
 39 }





































