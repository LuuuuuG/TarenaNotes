/**************************************************************************/
*									   *		
*				day_08					   *	
*									   *
/**************************************************************************/

	扫雷游戏
	一、函数




二维数组练习：
	1、 扫地雷游戏
		10*10 地图随机放10个地雷
		地雷用	X 表示
		空位置  O  表示

【Gang】              // 待调试！！！
  1 #include<stdio.h>
  2 #include<stdlib.h>
  3 #include<time.h>
  4 int main(){
  5     srand(time(0));
  6     int map[10][10] = {0};
  7     int i = 0,j = 0,m = 0,n = 0;
  8     int boom[i][j];
  9     int num = 0;
 10      for (;num < 10;){
 11             m = rand() % 10;
 12             n = rand() % 10;
 13         if(map[m][n] != -1){
 14             map[m][n] = -1;
 15             num++;
 16         }
 17         }
 18 
 19      for (i = 0;i < 10;i++){
 20         for(j = 0;j < 10;j++){
 21             if(map [i][j]){
 22                 printf("X");
 23             }
 24             else{
 25                 printf("o");
 26             }
 27 
 28         }
 29         printf("\n");
 30      }
 31 
 32 
 33     return 0;
 34 }




//Mr.Yang
  1 #include <stdio.h>
  2 #include <stdlib.h>
  3 #include <time.h>
 31 int main(){
 32     int map[10][10] = {0};    //初始化  此时地图上全是空位置0
 33     int row = 0,col = 0;
 34     int cnt = 0;    //用来计算地雷的个数
 35     srand(time(0));
 36     do{
 37         row = rand() % 10;
 38         col = rand() % 10;
 39         if(map[row][col] !=-1){     //用 -1 表示地雷的位置
 40             map[row][col] = -1;     //地图上不是-1的地方变成-1
 41             cnt++;			
 42         }
 43     }while(cnt < 10);
 44     for(row = 0;row < 10;row++){
 45         for(col = 0;col < 10;col++){
 46             if(!map[row][col]){
 47                 printf("O");
 48             }
 49             else{
 50                 printf("X");
 51             }
 52         }
 53         printf("\n");
 54     }
 55 
 56     return 0;
 57 }





		2. 扫雷进阶 （带上雷旁边的数字）  //方法一

		3、扫雷进阶 (从空白位置找到雷的位置) //方法二


#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int main() {
	int map[10][10] = {0}, row = 0, col = 0, cnt = 0, num = 0, newrow = 0, newcol = 0;
	int delta[8][2] = {{-1, -1},{-1, 0}, {-1, 1},
	         {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
	srand(time(0));
	do {		//随机在地图上生成地雷
		row = rand() % 10;
		col = rand() % 10;
		if (map[row][col] != -1) { // -1表示地雷的位置
			map[row][col] = -1; // 只在没有地雷的位置随机生成地雷
			cnt++;
		}
	} while (cnt < 10);

	//地图上用数字记录格子旁边有多少个地雷

	//方法一：先找地雷，在地雷旁边计数。
	/*for (row = 0;row <= 9;row++) {
		for (col = 0;col <= 9;col++) {
			if (map[row][col] != -1) {
				continue;
			}
            		for (num = 0;num <= 7;num++) {
				newrow = row + delta[num][0];
				newcol = col + delta[num][1];
				if (newrow < 0 || newrow > 9) {
					continue;
				}
				if (newcol < 0 || newcol > 9) {
					continue;
				}
				if (map[newrow][newcol] == -1) {
					continue;
				}
				map[newrow][newcol]++;
			}
		}
	}*/

	//方法二：先找空白地图，然后在地雷旁边计数。
	for (row = 0;row <= 9;row++) {			//处理不是地雷的区域
		for (col = 0;col <= 9;col++) {
			if (map[row][col] == -1) {  //跳过是地雷的区域
				continue;
			}
			for (num = 0;num <= 7;num++) {
				newrow = row + delta[num][0];
				newcol = col + delta[num][1];
				if (newrow < 0 || newrow > 9) {
					continue;
				}
				if (newcol < 0 || newcol > 9) {
					continue;
				}
				if (map[newrow][newcol] == -1) {
					map[row][col]++;
				}
			}
		}
	}

	//绘制地图
	for (row = 0;row <= 9;row++) {
		for (col = 0;col <= 9;col++) {
			if (!map[row][col]) {
				printf("O ");	//地图上空位置用O表示
			}
			else if (map[row][col] > 0) {
				printf("%d ", map[row][col]);
			//用数字显示地图上格子边上有地雷数量
			}
			else {
				printf("X ");//X表示地雷
			}
		}
		printf("\n");
	}
	return 0;
}





**********************************************************

			/*一、函数*/

	1、C语言中采用分组方式管理语句，每个语句分组叫做一个函数。
	2、多函数程序执行模式：
	  【1】整个程序的执行时间被划分成几段，不同时间段被分配给不同函数使用。
	  【2】所有时间段不能互相重叠并且是连续的。
	  【3】如果函数A在工作过程中把一段时间分配给函数B，则函数B在完成所有工作之后必须把后面的时间再还给函数A。
		【时间划分】
		b			***

		a		    ***	   ***

		main		****	      ***
	
	3、如果函数A在工作过程中把一段时间分配给函数B，则他们之间存在函数调用关系。
	   在这个关系中函数A叫做调用函数，函数B叫做被调用函数。
	4、函数调用关系有时间范围，只要被调用函数已经开始工作但还没有结束，
	   则函数调用关系存在。
	5、函数调用语句可以在程序执行过程中产生函数调用关系
	

*************	
  1 //函数演示
  2 #include<stdio.h>
  3 
  4 void print(void){
  5     printf("1\n");
  6 }
  7 int main(){
  8     print();
  9     return 0;
 10 }
********************	
	
	6、变量不可以跨函数使用。不同函数内部的变量可以重名。
	7、一个函数如果多次运行他内部的变量，每次对应的存储区都可能不同。

*********************
  1 //函数演示
  2 #include<stdio.h>
  3 
  4 void print(void){
  5     int num = 0;
  6     printf("1\n");
  7 }
  8 void func(void){
  9     int num;
 10     printf("num is %d\n",num);
 11     num = 10;
 12 }
 13 void func1(void){   //排除偶然两次调用func函数的因素
 14     int num = 10;
 15     int num1 = 11;
 16     int num2 = num + num1;
 17 
 18 }
 19 int main(){
 20     int num = 0;
 21 //  print();    
 22     func();
 23     func1();
 24     func();
 25     return 0;
 26 }
*********************
运行结果：
num is 134513857   //随机产生
num is 21	   //理应随机产生

*************************

	8、volatile关键字可以用来声明变量，如果变量对应的存储区可能被多个程序同时使用就应该在声明变量的时候使用这个关键字。
	9、函数调用过程中通常伴随着两个函数之间的数字传递。
	  数字传递存在两个完全相反的方向，
	  调用函数 到 被调用函数
	  被调用函数 到 调用函数
	10、不论那个方向的数据传递都需要使用被调用函数提供的存储区。
	11、被调用函数——>调用函数 只能传递一个数据(被调用函数的返回值)
							| 使用return 数值;
							V
						只能在函数结束时传递，
						被调用函数提供存储区。
						(存储区类型: 类型名 函数名)
	12、调用函数可以把函数调用语句当作数字使用，这个数字就是函数的返回值。
//函数返回值演示
  1 #include<stdio.h>
  2 int read(void){ //被调用函数
  3     int num = 0;
  4     printf("plz input a number:");
  5     scanf("%d",&num);
  6     return num;
  7 }   
  8 int main(){
  9     int num = read();    //调用read函数
 10     printf("num is %d\n",num);
 11     return 0;
 12 } 
********************
运行结果：
plz input a number:5
num is 5



【练习】
 /* 编写函数，解决鸡兔同笼问题，这个函数负责解决有多少个头和脚，
	然后把兔子的数量传递。*/

   #include <stdio.h>	
 20 int rabbit(void){
 21     int heads = 0,legs = 0,num = 0;
 22     printf("plz input the number of heads:");
 23     scanf("%d",&heads);
 24     printf("plz input the number of leds:");
 25     scanf("%d",&legs);
 26     for(num = 0;num <= heads;num++){  //计算兔子的数量
 27         if(4 * num + 2 * (heads - num) == legs){
 28             return num;
 29         }
 30     }
 31 }
 32 int main(){
 33     int num = rabbit();
 34     printf("There are %d rabbit\n",num);
 35     return 0;
 36 }

	
	13、如果函数提供存储区用来记录返回值但没有使用return关键字指定返回值的数值
		那么调用函数从这个存储区里获得的就是随机数。
	14、这个存储区不能用来和长期存放数字，调用函数获得返回值后，
		要么立刻使用 要么转存到其他存储区。
	15、函数名称前写void表示函数不提供存储区存放返回值。
		如果函数前面什么都没有，C99规范中不允许此情况
		C89规范中表示函数提供一个整数类型存储区存放返回值。
	16、函数不可以采用数组存放返回值。


【练习】
	从键盘得到两个整数，计算他们的最大公约数，并把结果传递给调用函数
		a	b
	不断作 b % a 得到的两个数与上面一组两个数最大公约数相 				
		48  	68
		20	48
		8	20	
		4	8
		0	4

【Gang】
  1 //用函数求最大公约数
  2 #include <stdio.h>
  3 int max_com(void){
  4     int a = 0,b = 0; // a > b
  5     int tmp = 0;
  6     printf("plz input two numbers:");
  7     scanf("%d%d",&a,&b);
  8     while(b % a){
  9         tmp = a;
 10         a = b % a;
 11         b = tmp;
 12     }
 13     return a;
 14 }
 15 
 16 int main(){
 17     int num = max_com();
 18     printf("max common number is %d\n",num);
 19     return 0;
 20 }




*****************************************
预习：
	1、函数
	2、递归
	3、作用域，全局变量和局部变量。































