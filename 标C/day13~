/**************************************************************************/
*									   *		
*				day_13					   *	
*									   *
/**************************************************************************/



	一、结构体
	二、联合和枚举


				/*结构体*/

	1、C语言可以在一个存储区里存放多个相关数字。
	2、这种存储区的类型叫做结构体，这种类型需要在程序中创建。
	3、结构体存储区里可以包含多个子存储区，每个存储区可以用来记录一个数字。
	4、不同子存储区的类型可以不同，子存储区也可以是结构体类型。
	5、结构体声明语句用来创建结构体类型。
	6、结构体声明语句需要使用 struct 关键字。
	7、结构体声明语句中的变量声明语句不会分配内存，
	     他们只是表示结构体内部的所有子存储区类型。可以写在头文件里。
	8、结构体类型可以用来声明/*结构体变量*/，结构体变量真正分配了内存，可以用来存放数字。
	9、struct 关键字和结构体类型名称合起来才可以作为/*类型名称*/使用。
	10、typedef 关键字可以用来给现有类型名称起别名。别名可以代替原有类型名称使用。
	11、可以把结构体声明语句和起别名的语句合并成为一条语句，这个时候可以省略结构体本身的名称。

	12、C语言里不允许结构体内部包含函数！！！

*************
//结构体演示
#include<stdio.h>
/*  struct person{
        int age;    //三个子存储区 只表示类型~
        float height;   //不分配内存~
        char name[10];  //可以写在头文件里~
    };
typedef struct person   people;//起别名 people;
效果等同与下*/
typedef struct /*person省略*/{
    int age;
    float height;       //结构体声明语句与起别名语句合并
    char name[10];
}people;

int main(){
//  struct person prn;  //结构体变量prn
    people prn1;	//结构体变量prn1
    return 0;
}
********************

	13、结构体变量也应该初始化，采用数组初始化的语法进行初始化。
	14、结构体变量通常不会作为整体使用，一次通常只使用其中某个子存储区。
	15、可以在结构体变量名称后加 . 再加子变量名称的方法表示结构体内部的某个子存储区
	
*****************
#include<stdio.h>
typedef struct /*person省略*/{
    int age;
    float height;       //结构体声明语句与起别名语句合并
    char name[10];
}people;

int main(){
    people prn1 = {20,1.73f,"abc"};
    printf("age is %d\n",prn1.age);
    printf("height is %g\n",prn1.height);
    printf("name is %s\n",prn1.name);
    return 0;
}

****************

【练习】
	从键盘上得到一个人的年龄，身高，姓名。

*****************
#include<stdio.h>
typedef struct /*person省略*/{
    int age;
    float height;       //结构体声明语句与起别名语句合并
    char name[10];
}people;

int main(){
    people prn1 = {20,1.73f,"abc"};
    printf("plz input age:");
    scanf("%d",&(prn1.age));
    printf("plz input height:");
    scanf("%g",&(prn1.height));
    scanf("%*[^\n]");   //清理
    scanf("%*c");       //缓存
    printf("plz input name:");
    fgets(prn1.name,10,stdin);
    printf("age is %d\n",prn1.age);
    printf("height is %g\n",prn1.height);
    printf("name is %s\n",prn1.name);
    return 0;
}
***************


	16、同类型结构体变量之间可以直接赋值。
		【e.g.】 prn2 = prn1;


                      

			/*结构体指针*/

	1、结构体指针可以记录一个结构体存储区的地址。
	2、当结构体指针和结构体存储区捆绑以后可以在结构体指针后加 -> 
		再加子存储区名称来表示这个子存储区。

*****************
//struct
#include<stdio.h>
typedef struct{
    int age;
    float height;
    char name[10];
}person;

int main(){
    person prn = {19,1.68,"abc"};
    person *p_person = &prn;       //声明结构体指针
    printf("%d\n",p_person->age);
    printf("%g\n",p_person->height);
    printf("%s\n",p_person->name);
    return 0;
}
**************

【练习】
	(1)、声明一个结构体，这个结构体声明的变量可以记录一个点的位置。
	   再声明一个结构体，这个结构体声明的变量可以记录一个水平长方形的位置。
	
	(2)、从键盘得到两个点的位置 算出他们中间点的位置 并打印
	   (用结构体指针和结构体变量分别表示)

//练习
#include<stdio.h>
typedef struct{
    int row;
    int col;
}point;

typedef struct{
    point pt1,pt2;  
}rect;
/*方法一：用结构体变量。
int main(){
    point pt1 = {0,0},pt2 = {0,0},pt_mid = {0,0};
    printf("plz input the adress of pt1:");
    scanf("%d%d",&(pt1.row),&(pt1.col));
    printf("plz input the adress of pt2:");
    scanf("%d%d",&(pt2.row),&(pt2.col));
    pt_mid.row = (pt1.row + pt2.row) / 2;
    pt_mid.col = (pt1.col + pt2.col) / 2;
    printf("middle of two point is %d %d\n",pt_mid.row,pt_mid.col);
    return 0;
}
*/
//方法二：结构体指针。
int main(){
    point pt1 = {0,0},pt2 = {0,0},mid = {0,0};
    point *p_pt1 = &pt1;
    point *p_pt2 = &pt2;
    point *p_mid = &mid;
    printf("plz input the adress of pt1:");
    scanf("%d%d",&(pt1.row),&(pt1.col));
    printf("plz input the adress of pt2:");
    scanf("%d%d",&(pt2.row),&(pt2.col));
    p_mid->row = (p_pt1->row + p_pt2->row) / 2;
    p_mid->col = (p_pt1->col + p_pt2->col) / 2;
    printf("middle of two point is %d %d\n",p_mid->row,p_mid->col);
    return 0;
}

		


	
		/*结构体的应用*/
	//结构体作形参
	1、结构体变量可以作为形参使用。(很麻烦~)
	2、采用结构体指针作为形参可以避免结构体做形参时，时间和空间的浪费。
	3、结构体指针做形参是尽量加 const 关键字。
			（被调用函数) 
			      ^  传					
			      |  递				
		          (调用函数） 


**************
//结构体练习
#include<stdio.h>
typedef struct{
    int row,col;
}pt;
/*ONE 结构体做形参 not good!
void print(pt pt1){
    printf("(%d, %d)\n",pt1.row,pt1.col);
}
int main(){
    pt pt1 = {4,7};
    print(pt1);
    return 0;
}
*/
//TWO 结构体指针做形参
void print(const pt *p_pt){ //结构体指针做形参时，尽量加const关键字。
    printf("(%d, %d)\n",p_pt->row,p_pt->col);
}
int main(){
    pt pt1 = {4,7};
    print(&pt1);
    return 0;
}
********************	
		
	//结构体作返回值。	
	4、可以把结构体变量的内容整个作为返回值使用，
	    但是这样也会造成时间和空间的浪费。
	5、可以用结构体存储区的地址作为返回值把结构体内容传递给调用函数，
	    这样可以避免浪费。
	6、不可以把局部结构体变量的地址作为返回值使用。
			（被调用函数) 
			      |  传					
			      V	 递	 
			  (调用函数）	

#include<stdio.h>
typedef struct{
    int row,col;
}pt;


void print(pt *p_pt){ //存储区内容变化，不加const关键字。
    printf("(%d, %d)\n",p_pt->row,p_pt->col);
}

/*ONE结构体变量作返回值
pt read(void){
    pt pt1 = {0};
    printf("plz input adress of the point:");
    scanf("%d%d",&(pt1.row),&(pt1.col));
    return pt1;
}*/

//TWO
pt *read(pt *p_pt){
    printf("plz input adress of the point:");
    scanf("%d%d",&(p_pt->row),&(p_pt->col));
    return p_pt;

}
int main(){
    pt pt1 = {0},*p_pt = NULL;
    p_pt = read(&pt1);
    print(p_pt);
    return 0;
}
    

**********



【练习】
	编写函数计算水平长方形面积
	  数值从调用函数得到。

************
//练1
#include<stdio.h>
typedef struct{
    int row,col;
}pt;
typedef struct{
    pt pt1,pt2;
}rect;

int area(const rect *p_rect){  //计算面积
    int ret = (p_rect->pt1.row - p_rect->pt2.row) * (p_rect->pt1.col - p_rect->pt2.col);
    return ret >= 0 ? ret : 0 - ret;
}

int main(){
    rect r = {0};
    printf("请输入长方形的位置：");
    scanf("%d%d%d%d",&(r.pt1.row),&(r.pt1.col),&(r.pt2.row),&(r.pt2.col));
    printf("面积是：%d\n",area(&r));  
    return 0;
}

*****************




【练习】
	根据两个已知点计算中点位置，并把结果传递给调用函数。

************
//练2
#include<stdio.h>
typedef struct{
    int row,col;
}pt;

pt *midpt(const pt *p_pt1,const pt *p_pt2,pt *p_mid){
    p_mid->row = (p_pt1->row + p_pt2->row) / 2;
    p_mid->col = (p_pt1->col + p_pt2->col) / 2;
    return p_mid;
}

int main(){
    pt pt1 = {0},pt2 = {0},mid = {0}, *p_pt = NULL;
    printf("plz input a point :");
    scanf("%d%d",&(pt1.row),&(pt1.col));
    printf("plz input another point :");
    scanf("%d%d",&(pt2.row),&(pt2.col));
    p_pt = midpt(&pt1,&pt2,&mid);
    printf("the middle point is (%d, %d)\n",p_pt->row,p_pt->col);
    return 0;
}

****************

	
		

				/*数据对齐*/
	1、任何一个存储区的地址必须是它自身大小的整数倍
	(double 类型存储区的地址只需要是4的整数倍)
	2、结构体内部子存储区通常也需要遵守数据对齐规则。
	3、数据对齐会造成结构体内部子存储区之间有空隙。
	
***************
//数据对齐演示
#include<stdio.h>
typedef struct{
    int num;
    char ch; 
}stru;

typedef struct{
    char ch; 
    int num;
    char ch1;
}stru1;

int main(){ 
    printf("sizeof(stru) is %d\n",sizeof(stru));
    printf("sizeof(stru1) is %d\n",sizeof(stru1));
    return 0;
}
**************
运行结果：
sizeof(stru) is 8
sizeof(stru1) is 12


***************
		
				/*数据补齐*/
	1、结构体存储区的大小必须是他内部占地最大基本类型存储区大小的整数倍。
	   (如果占地最大基本类型是double类型则之需要是4的整数倍就可以了。)
	2、数据补齐会造成结构体后面有浪费的字节。
	


【练习】
	编写函数从两个圆里找到面积比较大的，并返回给调用函数。


#include<stdio.h>
typedef struct{
    int row,col;
}pt;

typedef struct{
    pt center;	//结构体嵌套~
    int radius;
}circle;

const circle *larger(const circle *p_cl1,const circle *p_cl2){
    return p_cl1->radius >= p_cl2->radius ? p_cl1 : p_cl2;
}

int main(){
    circle cl1 = {0},cl2 = {0};
    const circle *p_cl = NULL;
    printf("piz input address of one circle:");
    scanf("%d%d%d",&(cl1.center.row),&(cl1.center.col),&(cl1.radius));
    printf("piz input address of another circle:");
    scanf("%d%d%d",&(cl2.center.row),&(cl2.center.col),&(cl2.radius));
    p_cl = larger(&cl1,&cl2);
    printf("result is ((%d, %d), %d)\n",p_cl->center.row,p_cl->center.col,p_cl->radius);
    return 0;
}






***************************************************
预习：
	1、枚举，联合
	2、二级指针
	3、函数指针
	4、回调指针
	5、动态内存分配


作业：
	编写函数从两个线段里挑 出比较长的并返回给调用函数。
	 线段长度的平方 = 行之差的平方 + 列之差的平方 
#include<stdio.h>.
typedef struct{
    int row,col;
}pt;

typedef struct{
    pt pt1,pt2;
}line;

const line *longer(const line *p_l1,const line *p_l2){
    int m = (((p_l1->pt1.row - p_l1->pt2.row) * (p_l1->pt1.row - p_l1->pt2.row)) + ((p_l1->pt1.col - p_l1->pt2.col) * (p_l1->pt1.col - p_l1->pt2.col)));
    int n = (((p_l2->pt1.row - p_l2->pt2.row) *(p_l2->pt1.row - p_l2->pt2.row)) + ((p_l2->pt1.col - p_l2->pt2.col) * (p_l2->pt1.col - p_l2->pt2.col)));
/*
    int m = sqrt(((p_l1->pt1.row - p_l1->pt2.row),2) + sqrt((p_l1->pt1.col - p_l1->pt2.col),2));
    int n = sqrt(((p_l2->pt1.row - p_l2->pt2.row),2) + sqrt((p_l2->pt1.col - p_l2->pt2.col),2));
*/
    return m > n ? p_l1 : p_l2;
}

int main(){
    line l1 = {0},l2 = {0};
    const line *p_l = NULL;
    printf("plz input 1st line :");
    scanf("%d%d%d%d",&(l1.pt1.row),&(l1.pt1.col),&(l1.pt2.row),&(l1.pt2.col));
    printf("plz input 2nd line :");
    scanf("%d%d%d%d",&(l2.pt1.row),&(l2.pt1.col),&(l2.pt2.row),&(l2.pt2.col));
    p_l = longer(&l1,&l2);
    printf("The longer is (%d, %d),(%d, %d)\n",p_l->pt1.row,p_l->pt1.col,p_l->pt2.row,p_l->pt2.col);
    return 0;
}

****************

//Mr.Yang
#include<stdio.h>
typedef struct{
    int row,col;
}pt;

typedef struct{
    pt pt1,pt2;
}line;

int len2(const line *p_l){
    return (p_l->pt1.row - p_l->pt2.row) * (p_l->pt1.row - p_l->pt2.row) + (p_l->pt1.col - p_l->pt2.col)*(p_l->pt1.col - p_l->pt2.col);
}

const line *longer(const line *p_l1,const line *p_l2){
    return len2(p_l1) > len2(p_l2) ? p_l1 : p_l2;
    
int main(){
    line l1 = {0},l2 = {0};
    const line *p_l = NULL;
    printf("plz input 1st line :");
    scanf("%d%d%d%d",&(l1.pt1.row),&(l1.pt1.col),&(l1.pt2.row),&(l1.pt2.col));
    printf("plz input 2nd line :");
    scanf("%d%d%d%d",&(l2.pt1.row),&(l2.pt1.col),&(l2.pt2.row),&(l2.pt2.col));
    p_l = longer(&l1,&l2);
    printf("The longer is (%d, %d),(%d, %d)\n",p_l->pt1.row,p_l->pt1.col,p_l->pt2.row,p_l->pt2.col);
    return 0;
}







































	











