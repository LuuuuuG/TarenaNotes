/**************************************************************************/
*									   *		
*				day_09					   *	
*									   *
/**************************************************************************/

		
	一、函数
	二、变长参数
	三、递归函数
	四、变量和作用域
	五、静态变量
	

	

			/*一、函数*/
			
	函数格式：
		返回值类型 函数名(形参){
	
		}

	
	1、为了从调用函数向被调用函数传递数据，
	也需要被调用函数提供一组存储区，这些存储区的类型和个数任意。
	2、可以在函数名称后的小括号里写一组变量声明语句，
	  用这些变量代表这些存储区。
	3、这些变量叫做函数的/*形式参数*/，小括号里的内容叫做函数的形式参数列表。
	4、每个形式参数的类型名称都不可以省略。不同形式参数声明用逗号分开。
	5、调用函数应该在函数调用语句的小括号里为每个形式参数提供一个对应的数字，
		这些数字叫做/*实际参数*/。
	6、能当作数字使用的内容都可以作为实际参数使用。
	7、如果函数不提供形式参数就应该在函数名称后面写 void 
	8、如果函数名称后面的小括号内容是空的就表示函数可以提供哦功能任意多个任意类型的形式参数。
	


**************
//形式参数演示
  1 #include<stdio.h>
  2 void print(int num,int num1/*形参*/){ //每个形参的类型不能省略
  3     printf("%d %d\n",num,num1);
  4 }
  5 int main(){
  6     print(4,6 + 7/*实参*/);
  7     return 0;
  8 }

***************



/*【练习】
	鸡兔同笼问题，头和脚的数量从调用函数里面解决。
*/
【Gang】
#include<stdio.h>
void print(int heads,int legs){
    int rabbits = 0;
    for(rabbits = 0;rabbits <= heads;rabbits++){
        if(rabbits * 2 + (heads - rabbits) * 4 == legs){
            printf("There are %d rabbits\n",rabbits);
        }   
    }   
}

int main(){
    print(40,120);
    return 0;
}


【改】
#include<stdio.h>
int print(int heads,int legs){
    int rabbits = 0;
    for(rabbits = 0;rabbits <= heads;rabbits++){
        if(rabbits * 4 + (heads - rabbits) * 2 == legs){
            return rabbits;
        }   
    }   
}

int main(){
    int heads = 0,legs = 0,num;
    printf("plz input numbers of heads and legs:");
    scanf("%d%d",&heads,&legs);
    num = print(heads,legs);
    printf("There are %d rabbits and %d checken\n",num,heads - num);
    return 0;
}


**************************

	1、数组可以作为形式参数使用，它仅仅是把形式参数写成数据的样子，
	       真正的形式参数并不是数组而是一个可以当作数组使用的变量。
	2、数组形式参数里包含的存储区都不是被调用函数提供的。
	3、数组形式参数可以让被调用函数使用其他函数提供的存储区(跨函数使用存储区)


//数组形式参数演示
#include<stdio.h>
void print(int arr[5]){
    int num = 0;
    for (num = 0;num <= 4;num++){
        printf("%d ",arr[num]);
    }   
    printf("\n");
}
void clear(int arr[5]){//将数组内容清零
    int num = 0;
    for (num = 0;num <= 4;num++){
        arr[num] = 0;
    }   
}

int main(){
    int arr[] = {1,2,3,4,5};//数组作为形参
    print(arr);
    clear(arr);
    print(arr);
    return 0;
}

************************

	4、使用数组形参可以实现双向数据传递，这种参数叫做输入输出参数。
	5、声明数组形参的时候可以省略其中包含的存储区个数。
	    如果省略，则需要提供另外一个整数类型形参表示数组里的存储区个数。


#include<stdio.h>
void print(int arr[],int size){ //声明一个size变量表示存储区个数
    int num = 0;
    for (num = 0;num <= size - 1;num++){
        printf("%d ",arr[num]);
    }   
    printf("\n");
}
void clear(int arr[],int size){//将数组内容清零
    int num = 0;
    for (num = 0;num <= size -1;num++){
        arr[num] = 0;
    }   
}

int main(){
    int arr[] = {1,2,3,4,5};//提供形参
    print(arr,5);
    clear(arr,5);
    print(arr,5);
    return 0;
}

***********************

【练习】
编写函数把一个数组里所有存储区的内容变成相反数，
在主函数数里把修改后的数组内容打印在屏幕上。
#include<stdio.h>
void print(int arr[5]){
	int num = 0;
	for(num = 0;num <= 4;num++){
		printf("%2d ",arr[num]);
	}
	printf("\n");
}

void negnum(int arr[5]){
	int num = 0;
	for(num = 0;num <= 4;num++){
		arr[num] =0 - arr[num];
	}
}

int main(){
	int arr[] = {1,2,3,4,5};
	print(arr);
	negnum(arr);
	print(arr);
	return 0;
}






			/*二、变长参数*/

	1、C语言中函数形参的数量不确定。
	2、变长参数不能事先命名，只能在被调用函数里通过特殊的方式得到它们。
	3、函数调用语句如果写在被调用函数语句前面，编译器会猜测函数格式
		这个猜测结果叫做函数的隐式声明。
	4、函数隐式声明中包含一个整数类型存储区用来存放返回值，还包含任意多个不确定类型的形参。
	5、隐式声明中的形参只能是int类型或double类型。
	6、如果函数隐式声明格式和真实格式不一致，在编译阶段就会出错。

		函数格式：
		返回值类型 函数名(形参)/*花括号前为函数声明*/ {

		}//花括号里的为函数体
	7、可以把函数声明单独写成一条语句，这个时候可以省略形参名称。
	8；函数的显示声明：
		把函数声明单独写在文件开头。 
	9、显示声明可以避免隐式声明。
	10、除了主函数以外的所有函数都应该显示声明。	
	


		/*exit标准函数*/可以立刻结束程序的执行
	1、为了使用这个标准函数需要包含stdlib.h头文件。
	2、这个函数需要一个证书作为实际参数，这个参数的作用和主函数的返回值一样。
		

*******************
//exit标准函数演示
  1 #include<stdio.h>
  2 #include<stdlib.h>
  3 void func(void){
  4     printf("2\n");
  5 //  return ; //立刻结束函数的执行
  6     exit(0); //结束程序
  7     printf("3\n");
  8 }
  9 
 10 int main(){
 11     printf("1\n");
 12     func();
 13     printf("4\n");
 14     return 0;
 15 }
******************


【练习】
	编写函数产生一张彩票，在主函数里把彩票内容打印在屏幕上
	彩票里包含7个1~36之间的随机数

【Gang】
//彩票2.0
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void ticket(int arr[7]){
    srand(time(0));
    int num = 0;
    for(num = 0;num <= 6;num++){
        arr[num] = rand() % 36 + 1;
    }
    for(num = 0;num <= 6;num++){
        printf("%d ",arr[num]);
    }
}

int main(){
    int arr[7] = {0};
    ticket(arr);
    printf("\n");
    return 0;
}




//Mr.Yang

void ticket(int arr[],int size){
    int num = 0;
    for(num = 0;num <= size - 1;num++){
        arr[num] = rand() % 36 + 1;
    }   

}

int main(){
    srand(time(0));
    int arr[7] = {0},num = 0;
    ticket(arr,7);
    for (num = 0;num <= 6;num++){
        printf("%d ",arr[num]);
    }   
    printf("\n");
    return 0;
}


********************************************

			/*三、递归函数*/
	1、C语言中函数可以调用自己，这种函数叫做递归函数。
	2、如果一个问题可以分解成几个小问题，
	    其中至少有一个小问题和原来的问题本质上一样，
	     只是稍微简单了一点，这种问题就可以采用递归函数解决。

	3、编写递归函数步骤：
		a.编写语句描述问题的分解方式(假设递归函数已经完成)
		b.在函数开头编写分支处理不可分解的情况(这个分支必须能让函数结束)
		(不需要明白程序执行过程！)
		
//递归函数演示
#include<stdio.h>
void print(int num){
    if (num == 1){ 
        printf("1 ");
        return ;
    }   
    print(num - 1); //假设递归函数已经完成，打印从1开始到num - 1
    printf("%d ",num);//打印num
}

int main(){
    int num = 0;
    printf("plz intput a number:");
    scanf("%d",&num);
    print(num);
    printf("\n");
    return 0;
}



******************
	
	4、能用递归解决的问题也能用循环解决。
		采用递归函数解决问题的思路叫做递归
		采用循环解决问题的思路叫做//递推		


【练习】
编写递归函数，计算从1开始到某个整数之间
  所有整数的和。

/*编写递归函数，计算从1开始到某个整数之间
  所有整数的和。
  */
#include<stdio.h>
int sum(int num){
    if(num == 1){ 
        return 1;    //num为1的情况
    }   
    
     return sum(num - 1) + num;//num不为1的情况 
}

int main(){
    int num = 0;
    printf("plz input a number:");
    scanf("%d",&num);
    printf("sum = %d\n",sum(num));
    return 0;
  }


**********************



			/*四、变量和作用域*/
	1、可以使用某个变量的所有语句叫做这个变量的作用域。
	2、声明在函数内部的变量叫做//局部变量，
	    它的作用域只包含声明它的函数内部的所有语句。
	3、声明在所有函数外边的变量叫做//全局变量，
	    它的作用域包含程序中的所有语句。
	
	4、没有初始化的/*全局变量*/会自动被初始化为 0 。
		      /*局部变量*/ 随机	
	5、局部变量可以和全局变量重名，使用这个变量名时，
		计算机会优先选择局部变量。

	

****************

//变量演示
#include<stdio.h>
 int num;       //全局变量
void func(void){
//  int num;    //局部变量
    printf("num = %d\n",num);
}
int main(){
    int num = 10; 
    func();     //结果num = 0 (使用全局便来那个)
    printf("num = %d\n",num);//结果num = 10(优先使用局部变量)
    return 0;
}
  
***********
	6、如果全局变量和局部变量都能满足程序要求就应该选择局部变量。
	7、变量的使用受作用域限制，而存储区不受(可以跨函数使用存储区)
	8、存储区的使用受到生命周期的限制。存储区只能在这个时间范围内使用。
	9、全局变量的生命周期是整个程序执行的时间范围，
		局部变量的生命周期是包含它的函数某一次执行的时间范围。
	
	10、如果一个函数多次执行，每次执行时它里面的局部变量对应的存储区都可能不同






			/*五、静态变量*/

	1、 static 关键字可以用来声明/*静态变量*/，静态变量的生命周期和作用域和普通变量不同。
	2、所有静态变量的生命周期都是整个程序的执行时间。
	3、静态变量存储区任何时候都可以使用。
	4、没有初始化的静态变量会自动被初始化为 0 (类似与全局变量) 
	5、静态变量只在程序开始执行的时候做一次初始化。
	6、可以跨函数使用静态局部变量的存储区。
	7、静态全局变量的作用域只包含声明他的文件内部的所有语句。



练习：
  1 1 2 3 5 8 13 21 ...
  0 1 2 3 4 5  6  7 ...
	
【Gang】
#include <stdio.h>
int fei(int num){
    if(num <= 1){ 
        return 1;
    }   
    return fei(num - 1) + fei(num - 2); 
}

int main(){
    int num = 0;
    printf("plz input the code:");
    scanf("%d",&num);
    printf("the number is %d\n",fei(num));
    return 0;
}



**********************************
作业：
	使用数组改写斐波那契数列。
	  多用几种方法。(最多3种)

/*
用数组改写斐波那契数列。
用三种不同的方法
    思路：延长数组生命周期，加快程序运行。
*/
#include <stdio.h>
/*方法一  将数组放在主函数内
int fei(int arr[],int num){
    int i = 0;
    for(i = 0;i <= num;i++){
        if(i <= 1){
            arr[i] = 1;
        }
        else{
            arr[i] = arr[i - 1] + arr[i - 2]; 
        }
    }
        return arr[num];
}

int main(){
    int num = 0;
    printf("plz input the code:");
    scanf("%d",&num);
    int arr[num];
    printf("the number is %d\n",fei(arr,num));
    return 0;
}*/


//Mr.Yang
int arr[50];    //法2 将数组改为全局变量
                //全局数组不需要初始化
int fei(int num){
//   static int arr[50] = {0}; //法3 延长数组生命周期
    if(num <= 1){
        return 1;
    }
    if(!arr[num - 2]){
        arr[num - 2] = fei(num - 2);
    }
    if(!arr[num - 1]){
        arr[num - 1] = fei(num - 1);
    }
     return fei(num - 1) + fei(num - 2);
}

int main(){
    int num = 0;
    printf("plz input the code:");
    scanf("%d",&num);
    printf("the number is %d\n",fei(num));
    return 0;
}





***************************

预习：
	指针

























































