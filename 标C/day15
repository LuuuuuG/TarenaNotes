/**************************************************************************/
*									   *		
*				day_15					   *	
*									   *
/**************************************************************************/	

	一、动态内存分配(续)
	二、文件
	

			/*一、动态内存分配(续)*/
	//calloc函数
	void *calloc(size_t n,size_t size);

	1、它可以把所有动态分配存储区的内容设置成 0。
	2、为了使用这个函数也需要包含stdlib.h头文件。
	3、它的返回值与malloc函数一样，是分配好的第一个字节的地址。
	   如果分配失败返回的是 NULL。
	4、它需要两个参数，第一个参数表示要分配的存储区个数，
			  第二个参数表示单个存储区的大小。


	//realloc函数
	1、它可以调整动态分配内存的大小。
	2、尽量少使用这个函数！！！






			/*二、文件*/

	1、文件里一定采用二进制方式记录数字。
	2、如果文件里所有字节都是字符的ASCII码，这种文件叫做//文本文件。
		文本文件以外的文件叫做//二进制文件。
	3、所有文件都可以采用二进制方式操作。
	4、文件操作基本步骤：
		(1)打开文件(fopen)
		(2)操作文件(fread/fwrite)
		(3)关闭文件(fclose)
	




	//fopen函数
	1、fopen函数需要两个参数：
		第一个代表要打开的文件路径，
		第二个代表打开方式(决定程序中可以怎么使用文件)。	
	2、打开方式有如下选择：
		"r"	只能查看文件内容而且只能从文件头开始，
			要求文件已经存在，如果不村在就会打开失败。	
		
		"r+"	比"r"多了修改功能(要求文件已经存在)。

		"w"	只能修改文件内容而且只能从文件头开始修改。
			如果文件还不存在就创建文件，
			如果文件存在就删除文件内容。
		
		"w+"	比"w"多了个查看目录。

		"a"	只能在文件末尾追加新内容。
			如果文件不存在就创建文件，
			如果文件存在就保留原有内容。

		"a+"	比"a"多了查看功能。

		"b"	可以和上面任何一种打开方式混合使用~~~
			它表示以二进制方式操作文件。

	3、fopen函数返回值是文件指针，只有文件指针才可以在程序中代表文件。
	4、fopen函数有可能失败，如果失败返回值是 NULL
		(类似与malloc函数)

	//fclose函数
	1、一旦完成对文件的操作后必须使用fclose函数关闭文件。
	2、fclose函数需要文件指针作为参数。
	3、文件关闭后文件指针成为野指针，必须恢复成空指针。
		(类似与free函数~)	
	



*******************

//文件操作代码框架
#include <stdio.h>
int main(){
    FILE *p_file = fopen("a.txt"/*文件路径*/,"w"/*操作方式*/);
    //文件指针打开文件
/*写法一
    if (p_file) {
        //文件打开成功
        fclose(p_file);     //打开的文件不关闭会造成内存泄露!!! 
        p_file = NULL;
    }
*/
//写法二：
    if (!p_file) {
        //文件打开失败
        return 0;
    }   
    //打开成功
    fclose(p_file);
    p_file = NULL;
    return 0;
}

*****************

		


		//文件操作
	1、文件操作分为两种:
		(I)  把内存中一组连续存储区的内容拷贝到文件里(写文件)
		(II) 从文件中把一组连续的内容拷贝到内存里(读文件)
	
	2、fwrite函数可以以二进制方式对文件进行写操作。
	   fread函数可以以二进制的方式对文件进行读操作。


		这两个函数都需要四个参数：
	 	
			a.	内存里第一个存储区的地址
			b.	内存里单个存储区的大小
			c.	希望操作的存储区个数
			d.	文件指针

	  它们的返回值表示实际操作的存储区个数。0 代表没有进行读写操作。



*************	
//fwrite演示
#include <stdio.h>

int main(){
    int arr[] = {1,2,3,4,5},size = 0;
    FILE *p_file = fopen("a.bin","wb");
    if (p_file) {
        size = fwrite(arr,sizeof(int),5,p_file);
//返回值表示实际操作的存储区个数   
        printf("size is %d\n",size);
        fclose(p_file);
        p_file = NULL;
    }   
    return 0;
}
**************

【练习】
	编写程序从a.bin文件获得所有存储区的内容并把结果打印在屏幕上。

【Gang】
#include <stdio.h>
int main(){
    int arr[5] = {0},num = 0;
    int *p_num = arr;
    FILE *p_file = fopen("a.bin","rb");
    if(p_file){
        fread(arr,sizeof(int),5,p_file);
        for(num = 0;num <= 4;num++){
            *(p_num + num) = arr[num];
        }   
        for(num = 0;num <= 4;num++){
            printf("%d ",*(p_num + num));
        }   
        printf("\n");
        fclose(p_file);
        p_file = NULL;
    }   
    return 0;
}


//Mr.Yang
#include <stdio.h>
int main(){
    int arr[5] = {0},num = 0;
    FILE *p_file = fopen("a.bin","rb");
    if(p_file){
        fread(arr,sizeof(int),5,p_file);
        for(num = 0;num <= 4;num++){
            printf("%d ",arr[num]);
        }   
        printf("\n");
        fclose(p_file);
        p_file = NULL;
    }   
    return 0;
}
***************
运行结果：
size is 5
1 2 3 4 5
***************





******************
//文本文件
#include<stdio.h>
#include<string.h>
int main(){
    char str[] = "1,2,3,4,5";   //字符串字面值初始化数组
    FILE *p_file = fopen("a.txt","wb");
    if (p_file) {
        fwrite(str,sizeof(char),strlen(str)/*数出字符个数*/,p_file);
        fclose(p_file);
        p_file = NULL;
    }       
    return 0;
}
******************
运行结果
生成一个a.txt的文本



	//fprintf函数
	1、fprintf函数按照格式把数据记录到文本文件里。
	2、这个函数的第一个参数是一个文件指针，其他参数和printf函数的参数一样。


*************	
//文本文件演示
#include <stdio.h>

int main(){
    int arr[] = {1,2,3,4,5},num = 0;
    FILE *p_file = fopen("b.txt","w");
    if(p_file){
        for (num = 0;num <= 4;num++){
            fprintf(p_file,"%d ",arr[num]); //将数据记录到文件里
        }   
        fclose(p_file);
        p_file = NULL;
    }   
    return 0;
}
*************



	//fscanf函数
	1、fscanf函数可以按照格式从文本文件里获得数据并记录到存储区里。
	2、这个函数的第一个参数是一个文件指针，其他参数和scanf函数一样。



*************
#include <stdio.h>
int main(){
    int num = 0,num1 = 0;
    FILE *p_file = fopen("b.txt","r");
    if (p_file) {
        for (num = 0;num <= 4;num++) {
            fscanf(p_file,"%d",&num1);  //将文件里的数据读到num1里
            printf("%d ",num1);
        }   
        printf("\n");
        fclose(p_file);
        p_file = NULL;
    }   
    return 0;
}

*************



	
			/*文件的位置指针*/


	1、计算机里为每个打开的文件保留一个整数，这个整数表示下一次读写操作的开始位置。
	2、这个整数表示从文件头开始到这个位置为止中间包含的字节个数。
	3、这个整数叫做文件的位置指针。
	4、当从文件里获得n个字节或写入n个字节后，这个整数会增加n	
	    【e.g.】 	 b.txt
				
		1 2 3 4 5 
	       |
	       V
	    位置指针

	//ftell函数
	1、ftell函数可以获得当前位置指针的数值。
	

	//rewind函数
	1、rewind函数可以把位置指针的数值设置成 0


	//fseek函数
	1、fseek函数可以把位置指针设置成文件中的任何位置。
	2、fseek函数使用时需要指定一个基准位置和目标位置到基准位置之间的距离。

	SEEK_SET	0	把文件头作为基准位置
	SEEK_CUR	1	把当前位置作为基准位置
	SEEK_END	2	把文件尾作为基准位置

	   如果目标位置在基准位置后，则距离是正数。
	   如果目标位置在基准位置前，则距离是负数。
	
	   距离的数字代表两个位置之间包含的字节个数。


***************
//位置指针演示
#include <stdio.h>
int main(){
    char ch = 0;
    FILE *p_file = fopen("abc.txt","rb");
    if (p_file) {
        fseek(p_file,2,SEEK_SET);  //将位置指针置于文件头后2位
        printf("%ld\n",ftell(p_file));  //打印位置指针当前位置
        fread(&ch,sizeof(char),1,p_file);//读1个字符
        printf("%c\n",ch);
    
        fseek(p_file,4,SEEK_CUR);  //将位置指针置于当前位置后4位
        printf("%ld\n",ftell(p_file));
        fread(&ch,sizeof(char),1,p_file); 
        printf("%c\n",ch);
            
        fseek(p_file,-4,SEEK_END);  //将位置指针置于文件尾前4位
        printf("%ld\n",ftell(p_file));
        fread(&ch,sizeof(char),1,p_file);
        printf("%c\n",ch);

        rewind(p_file);         //把位置指针设置成0
        printf("%ld\n",ftell(p_file));
        fclose(p_file);
        p_file = NULL;
    }   
    return 0;
}
************



【练习】
	编写模拟人员管理系统，可以把多个人员信息以二进制方式记录到文件里，
	每个人员信息包括整数类型的id，float 类型的salary 和最多9个字符的姓名
	文件内容可以追加。

#include <stdio.h>
typedef struct{
    int id; 
    float salary;
    char name[9];

}person;

int main(){
    person prn = {0};
    int choice = 0;
    FILE *p_file = fopen("person.bin","ab");
    if (p_file){
        while(1){
            printf("plz input id :");
            scanf("%d",&(prn.id));
    
            printf("plz input salary:");
            scanf("%g",&(prn.salary));
            scanf("%*[^\n]"); 
            scanf("%*c");     //清理
    
            printf("plz input name:");
            fgets(prn.name,9,stdin);
    
            fwrite(&prn,sizeof(person),1,p_file);   //将信息写如文件中
            printf("1 is continue 0 is do not:");
            scanf("%d",&choice);
            if (!choice) {
                break;
            }   
        }   
        fclose(p_file);
        p_file = NULL;
    }   
    return 0;   
}





**********************************

作业：
	编写程序从person.bin文件里得到所有人员id并把他们打印在屏幕上。

【Gang】
#include <stdio.h>

int main(){
    int id = 0;
    FILE *p_file = fopen("person.bin","rb");
    if (p_file) {
        while(/*囧...循环体不会写T-T*/){
            fread(&id,sizeof(int),1,p_file);
            printf("%d\n",id);
            fseek(p_file,16,SEEK_CUR);
        }   
        fclose(p_file);
        p_file = NULL;
    }   

    return 0;
}
*************************
【改:】//循环体
        while(1){

            if(!fread(&id,sizeof(int),1,p_file)){
                break;//不能获得下一个id的时候结束循环。
            }
*************************

//Mr.Yang
//文件作业
#include <stdio.h>
typedef struct{
    int id;
    float salary;
    char name[10];
}person;

int main(){
    int id = 0;
    FILE *p_file = fopen("person.bin","rb");
    if(p_file){
        while(1){

            if(!fread(&id,sizeof(int),1,p_file)){
                break;//不能获得下一个id的时候结束循环。
            }
            printf("%d\n",id);
            fseek(p_file,sizeof(person) - sizeof(int),SEEK_CUR);
            //结构体大小 - int类型大小 = id 之间的距离
        }
    }
    return 0;
}























