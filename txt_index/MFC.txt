
复习：
	虚函数/多态

	this 谁调用就是谁/构造谁就是谁/析构谁就是谁

	union  
	
	->* / .*

	静态成员变量/静态成员函数




一、课程安排
  MFC - 微软基础类库和框架  		  13天
  SOCKET - Windows平台上的网络通信编程     2天
  ADO - Windows平台上一套操作数据库的接口  1天
  COM - 组件编程的应用 			   1天
  VOD - 视频点播			   4天

二、需要掌握的技能
    熟练掌握 断电 调试程序的方法。
    掌握 CALL STACK（调用堆栈）工具，查看函数之间的调用关系。
    学会使用VC的向导和工具
    借助MSDN

三 要求
    1 不缺课,课程连续性极强。
    2 多思考,多联系（练习）。


--------------------------Day01----------------------------------------

    一、MFC的概念和作用
	1.什么是MFC ???
	  全称为Microsoft Foundation Class Library (微软基础类库)
	1) 从硬盘的存在形式上来说, MFC就是一个库(动/静态库)
	2) 从原理上来说MFC还是一个程序框架。

	2.为什么使用MFC ？？
	  基于矿建基础之上编程，提高工作效率，减少开发周期，节约开发成本。

    二、 一些比较重要的头文件
	afx.h - 包含了MFC库中绝大部分类的声明。
	afxwin.h - 包含了<afx.h> 和 <windows.h>
	afxext.h - 包含了一些扩展类的声明。如：工具栏类，状态栏类...
	
    附加：**************************************
	以Afx...开头的函数,可以这是确定MFC库中封装的全局函数。
	以:: 开头的函数,可以确定这是WIN32的API函数。
	

    三、MFC应用程序的分类
	1 使用MFC库制作自己的控制台程序。
  	  --多了一个全局对象CWinApp theApp 
 	  --入口函数不同于以往的入口函数。

	2 使用MFC库制作自己的静态库文件

	3 使用MFC库制作自己的动态库程序
	  1)使用MFC库制作自己的规则动态库程序
	  2)使用MFC库制作自己的扩展动态库程序
	    区别：规则动态库可以本任何程序调用，
		  扩展动态库只能被支持MFC的程序调用。


	4 使用MFC库制作自己的窗口程序
	  a单文档视图构架程序：	
	    CFrameWnd - 框架窗口类,封装了关于框架窗口的各种操作。
	    CWinApp   - 应用程序类，封装了关于流程的管理。
	    CDocument - 文档类，封装了关于数据的管理。如:提取/转换/存储。
	    CView     - 视图窗口类，封装了关于视图窗口的操作(显示数据).
	  b多文档视图构架程序：
	    CMDIChildWnd - 子框架窗口类,封装了关于子框架窗口的各种操作。
	    CMDIFrameWnd - 主框架窗口类,封装了关于主框架窗口的各种操作。
	    CWinApp   - 应用程序类，封装了关于流程的管理。
	    CDocument - 文档类，封装了关于数据的管理。如:提取/转换/存储。
	    CView     - 视图窗口类，封装了关于视图窗口的操作(显示数据).
	  c对话框构架程序
	    CWinApp   - 应用程序类，封装了关于流程的管理。
	    CDialog   - 对话框窗口类，封装了关于对话框窗口的各种操作。

	
    四、MFC库中类的概述
	CObject - MFC库中绝大部分类的最基类
	  运行时类信息机制/动态创建机制/序列化机制

	CCmdTarget - 消息映射机制的最基类
	CWinThread/CWinApp - 应用程序类，负责管理程序的流程。
	CDocument及其自雷 - 文档类，封装关于各种格式数据的管理。
	Exceptions - 异常处理类，封装了MFC库中可能出现的各种异常情况。
	CFile 及其子类 - 文件操作类，封装了各种文件的读写等操作。

	CWnd - 所有窗口类的最基类
	Frame Windows - 框架窗口类，封装了关于各种框架窗口的操作
	Dialog Boxes - 对话框窗口类，封装了各种对话框的操作。
	Views - 视图窗口类，封装了关于各种视图窗口的操作
	Controls - 控件窗口类，封装了各种子控件窗口的操作。
	CDC 及其子类 - 绘图设备类，封装了各种绘图设备，以及绘图函数。
	CGdiObject及其子类 - GDI绘图对象类，封装了各种绘图对象的操作。
	Array/List/Maps - 封装了C++语法中相应的数据结构类。
	非CObject - 封装了各种特定的数据结构。
	    例如：CPoint/CRect/CTime...

    五、第一个MFC程序
        1.配置环境
	1.1 将入口函数WinMain删除
	1.2 将头文件更改为<afxwin.h>
	1.3 Project -- >Settings中设置使用MFC（静/动态）库
        2 代码的书写
     	 2.1 从CFrameWnd类,公有派生了一个自己框架窗口类
         	   (CMyFrameWnd)
  	    2.2 从CWinAPP类,公有派生了一个自己的应用程序类
       	     (CMyWinApp)，并重写了父类的成员虚函数InitInstance,
          	  创建并显式一个框架窗口。

        3 程序的执行过程（流程）
          1）利用AfxGetThread() / AfxGetApp()获取&theApp
          2）利用theApp调用应用程序类的成员虚函数
                InitApplication (初始化)
          3）利用theApp调用应用程序类的成员虚函数
                InitInstance (创建/显示窗口)
          4）利用theApp调用应用程序类的成员虚函数
                Run (消息循环)
          5）当没有消息时,利用theApp调用应用程序类的成员虚函数
                OnIdle (空闲处理)
          6）当程序退出时,利用theApp调用应用程序类的成员虚函数
                ExitInstance (善后处理)




---------------------------Day03----------------------------------

一、消息映射
    1. 相关概念
	引入消息映射，可以替代庞大的switch-case,优化代码给
	消息映射指的是消息ID与消息处理函数的映射。
    2. 消息映射的实现
	2.1 必须是CCmdTarget类的派生类
	2.2 在类的声明中添加消息映射的声明宏
	 	DECLARE_MESSAGE_MAP()
	2.3 在类的实现中添加消息映射的实现宏
		BEGIN_MESSAGE_MAP(theClass,baseClass)
		    ON_MESSAGE(WM_CREATE,OnCreate)
		    ON_MESSAGE(WM_PAINT,OnPaint)
		END_MESSAGE_MAP()

	2.4 在类中添加消息处理函数的声明和实现
	
    3 消息映射的实现原理
	3.1 展开宏
		...
	    3.2 结构体的介绍

struct AFX_MSGMAP_ENTRY
{
	UINT nMessage;   // 窗口消息ID
	UINT nCode;      // 通知消息的ID(通知码)
	UINT nID;        // 控件ID/菜单ID
	UINT nLastID;    // 在范围中表示控件/菜单结束的ID
	UINT nSig;       // 消息处理函数的类型(根据参数和返回值划分的)
	AFX_PMSG pfn;    // 消息处理函数的指针
};

struct AFX_MSGMAP{
	const AFX_MSGMAP* pBaseMap;//指向父类的变量的指针
	const AFX_MSGMAP_ENTRY* lpEntries;//指向本类的结构体数组的指针
};


	    3.3 成员的介绍
		_messageEntries[] - 静态的结构体数组，保存了当前类CMyFrameWnd的处理的消息。
	
		messageMap - 静态的结构体变量,类型是AFX_MSGMAP，保存父类的messageMap的地址，
		


    二、MFC对消息的分类
	1. 窗口消息(标准消息)，例如WM_CREATE/WM_SIZE以及鼠标、键盘、定时器等消息。
	2 命令消息，菜单、工具栏、加速键等消息
		ON_COMMAND()

	3. 通知消息，大部分都是控件消息。

	4. 用户自定义消息（*重点*）
	  4.1 定义消息宏
		#define WM_USE_MSG WM_USER+N
	  4.2 添加消息映射
		ON_MESSAGE(消息ID，消息处理函数)
	  4.3 添加消息处理的函数声明和实现
	  4.4 触发/发送消息
		SendMessage
		PostMessage
		
---------------------------Day04----------------------------------

一、菜单
    1. 相关类
	CMenu类 - 封装了菜单句柄与操作菜单的API。
    2. CMenu类的使用
    	2.1 添加菜单资源，设计菜单
	2.2 加载 菜单资源
	    CMenu::LoadMenu
	2.3 将菜单设置到窗口
	    CWnd::SetMenu
	2.4 快捷菜单
	    2.4.1 消息映射宏
		ON_WM_CONTEXTMENU()
	    2.4.2 加载菜单
		CMenu::LoadMenu
	    2.4.3 获取某一个菜单项
		CMenu::GetSubMenu
	    2.4.4 显示快捷菜单	
		CMenu::TrackPopupMenu
	3 菜单消息，属于命令消息
   
    	3.1对比：
    1>窗口消息(标准消息) 对消息链的遍历在CWnd::OnWndMsg函数中完成的。
    2>命令消息对消息的遍历在CCmdTarget::OnCmdMsg函数中完成的。
	3.2 对命令消息的处理顺序
	    Frame->App
	    
	

二、工具栏
    1. 相关类
	CToolBar类 - 工具栏类
    2. CToolBar类的使用。
    	2.1 添加工具栏资源,设计工具栏的按钮
	2.2 创建工具栏窗口
	    CToolBar::Create/CreateEx
	2.3 加载工具栏
	    CToolBar::LoadToolBar
	2.4 停靠工具栏
	    2.4.1 设置工具栏允许停靠
		CToolBar::EnableDocking
	    2.4.2 设置框架窗口允许被停靠
	 	CFrameWnd::EnableDocking
	    2.4.3 停靠工具栏
		CFrameWnd::DockControlBar
	2.5 设置工具栏的窗口标题
	    CWnd::SetWindowText
	2.6 设置工具栏的显示状态
	    CFrameWnd::ShowControlBar
	2.7 设置工具栏上按钮的提示信息
	    2.7.1 增加样式:CBRS_TOOLTIPS
	    2.7.2 在按钮的属性中设置提示信息


    课堂练习：1 添加一个工具栏,停靠在窗口的右边。并再增加一个菜单去控制它的显示/隐藏状态。

三、状态栏
    1. 相关类
	CStatusBar类 - 状态栏类
    2.  CStatusBar类的使用
	2.1 创建状态栏窗口
	    CStatusBar::Create/CreateEx
	2.2 设置状态栏指示器
	    CStatusBar::SetIndicators
	2.3 设置文本
	    CStatusBar::SetPaneText

    课后作业：在基本的窗口中添加菜单、工具栏和状态栏。
	
	马志国  扣扣: 149198978






---------------------------Day05----------------------------------
一 MFC的视图
1 概念
    是一个专门用来显示数据或接受用户输入的窗口。位置通常位于框架窗口的客户区。

2 相关类
    CView类 - 父类是CWnd类。显示数据的窗口类。包含了纯虚函数OnDraw(),所以该类是一个抽象类。

3 CView 的使用
    3.1 添加CView的子类CMyView类，并且重写OnDraw函数。
    3.2 在CMyFrameWnd类中添加成员变量
	CMyView* m_wndView;//视图对象指针
    3.3 在CMyFrameWnd::OnCreate函数中：
	3.3.1 m_wndView = new CMyView;//new对象
	3.3.2 创建视图窗口
	    m_wndView->Create(...);
	处理框架窗口WM_SIZE消息，实现视图窗口自适应框架窗口的大小。
    3.4 将当前视图设置为框架窗口的活动视图
	SetActiveView(m_pWndView);

4 对命令消息的处理
    ActiveView->Frame->App

5 类(对象)之间的关系
    CWinApp
       | -> m_pMainWnd (CFrameWnd)
           | -> m_pViewActive (CView)	

6 OnDraw与OnPaint(WM_PAINT消息的处理函数)的关系?

    void CView::OnPaint()->CMyView::OnDraw()
    CMyView::OnPaint()
	两者都可以显示数据，但是使用OnDraw函数更简单方便。

二 运行时类信息
1 概念
    程序在运行时，获取对象的类信息。
	class CDog: class CAnimal:class CObject
	CDog dog;
2 定义支持运行时类信息的类
    2.1 从CObject类派生
    2.2 在类的声明中,添加运行时类信息的声明宏
	DELCARE_DYNAMIC(theClass)
    2.3 在类的实现中，添加运行时类信息的实现宏
	IMPLEMENT_DYNAMIC(theClass,baseCalss)


3 使用IsKindof()函数判断对象是否属于某个类

4 实现原理
    4.1 展开宏
	...
    4.2 结构体的介绍

struct CRuntimeClass{
	LPCSTR m_lpszClassName;//类名称
	int m_nObjectSize;//类大小
	UINT m_wSchema; // 类的版本
	CObject* (PASCAL* m_pfnCreateObject)(); // NULL => abstract class
	CRuntimeClass* m_pBaseClass;//父类ClassAnimal变量的指针
	...
};
更像单向链表中的一个节点，所以形成一个继承关系上的类的信息链表。


    4.3 成员的作用
	classCDog - 静态的结构体变量，类型是CRuntimeClass。
		    保存了当前类的信息以及指向父类的classCAnimal变量。

	GetRuntimeClass() - 虚函数，作用是返回classCDog的地址。

    4.4 成员的关系
	GetRuntimeClass()
		| -> &classCDog
		        | -> CDog类的类名、大小、版本等信息
		        | -> &classCAnimal
 		                | -> 类的类名、大小和版本等信息
 		                | -> &classCObject
	 		                | -> CObject类的类名、大小、版本等信息。
					| -> NULL


    4.5 IsKindOf函数的实现过程




三 动态创建

1. 概念
    创建位置类型的对象

2.  定义支持运行时类信息的类
2.1 直接或者间接从CObject类派生
2.2 在类的声明中添加运行时类信息的声明宏
    DECLARE_DYNCREATE(the class)
    在类的实现中添加运行时类信息的实现宏
    IMPLEMENT_DYNCREATE(theClass,baseClass)

3 实现原理
3.1 展开宏
    在运行时类信息宏的基础上多了一个CreateObject函数
3.2 成员的作用
    CreateObject() - 作用是new对象 

//2 动态创建



3.3 创建过程

四 窗口切分(使用动态创建的方式创建视图)
    1. 分类
	动态切分 - 程序在运行时，用户根据需要实时的进行窗口切分。
		 - 一般情况下，动态切分的视图窗口使用的是同一个视图类。

	静态切分 - 在程序编写时就已经确定了窗口切分的数量。
		   每一个视图窗口可以使用不同的视图类。

    2. 相关类
	CSplitterWnd类 - 完成窗口切分的类。
	#include <afxext.h>
    3. 动态切分的步骤
  
  BOOL Create( 
    CWnd* pParentWnd,//父窗口的指针 
    int nMaxRows, //最大行数，最大值为2
    int nMaxCols,//最大列数，最大值为2 
    SIZE sizeMin,//最小尺寸(宽和高) 
    CCreateContext* pContext,//结构体的指针 
    DWORD dwStyle = WS_CHILD,//窗口的风格 
    UINT nID = AFX_IDW_PANE_FIRST//窗口ID
  );
   AFX_IDW_PANE_FIRST:子窗口自适应父窗口的大小。
  注意：动态切分的视图窗口是随动态切分一块由底层代码创建的，
        无需单独创建视图窗口。



---------------------------Day06---------------------------------


4 静态切分
4.1 创建静态切分
  BOOL CreateStatic( 
   CWnd* pParentWnd,//父窗口指针 
   int nRows, //行数，最大值16
   int nCols, //列数，最大值16
   DWORD dwStyle = WS_CHILD | WS_VISIBLE,//窗口的样式 
   UINT nID = AFX_IDW_PANE_FIRST//窗口ID
   );
4.2 创建视图
   virtual BOOL CreateView( 
   int row,//行的索引 
   int col, //列的索引
   CRuntimeClass* pViewClass,//视图类的运行时类信息 
   SIZE sizeInit, //初始大小
   CCreateContext* pContext//结构体
   );
      
5 静态切分窗口的再切分
5.1 添加切分窗口的在切分
5.2 创建窗口切分，注意父窗口是第一个切分对象。ID通过调用IdFromRowCol函数得到。
5.3 创建第二次切分窗口的视图
5.4 调整视图的大小
	CSplitterWnd::SetColumnInfo
	CSplitterWnd::SetRowInfo

在vc中，我们可以使用spy++工具查看窗口的信息和消息。

二、MFC文档

    1 相关类
	CDocument类 - 父类是CCmdTarget类。作用是管理数据，包括对数据的保存和加载   

    2 CDocument类的使用
 	解决两个问题：
	2.1 视图对象及窗口是如何被创建的？
	2.2 文档与视图关系是什么？这种关系是何时建立的？

    3 各个类(各个对象)之间的关系
  CWinApp
    |->m_pMainWnd (CFrameWnd)
         |->m_pViewActive (CView)
                |->m_pDocument (CDocument)
                      |->m_viewList (CView List)

    4 相关函数(例子：在视图中显示文档的数据)
	4.1 框架的初始化更新函数,
	    CFrameWnd::InitialUpdateFrame
	4.2 视图的初始化更新函数
	    CView::OnInitialUpdate
	4.3 获取与视图关联的文档
	    CView::GetDocument

    5 命令消息处理  
      View->Document->Frame->App 



---------------------------Day07---------------------------------


三 使用文档模板创建文档视图程序
    
    1 文档模板类
	CDocTemplate类-是一个抽象基类，定义了文档模板的基本功能。

CSingleDocTemplate类-单文档模板类。
CSingleDocTemplate( 
 UINT nIDResource,//资源ID 
 CRuntimeClass* pDocClass,//文档类的运行时类信息 
 CRuntimeClass* pFrameClass,//框架类的运行时类信息 
 CRuntimeClass* pViewClass//视图类的运行时类信息
);



  MFC 提供的断言宏
    ASSERT VERIFY

2 单文档程序的执行过程
2.1 创建单文档模板对象
2.2 将文档模板对象添加到应用程序
    AddDocTemplate(pTemplate);
2.3 新建文档
    OnFileNew();




二 使用文档模板创建多文档视图程序
1 相关类
1.1 CMD








