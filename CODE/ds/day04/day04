/**************************************************************************/
*									   *		
*				day_04					   *	
*									   *
/**************************************************************************/




		1、链表
		2、二叉树


		
			/*链表 List*/

	1.1 基本概念
		由若干个地址不连续的节点序列组成，
  		不同的节点之间彼此通过指针连接组成的数据结构。


	1.2 基本分类
		(1) 单向线性链表

		每个节点中除了存储数据元素本身之外，
		还需要保存下一个节点地址的指针，叫做//后指针。
			
		其中链表中第一个节点，叫做//头节点；
		指向头节点的指针叫做//头指针；

		其中链表中最后一个节点，叫做//尾节点；
		指向尾节点的指针叫做//尾指针；
		
		尾节点中的后指针是一个//空指针。			


		(2) 单向循环链表

		与单向线性链表类似，所不同的是让尾节点的后指针指向头节点，
		首尾相接构成环状结构；
					
		
		(3) 双向线性链表

		每个节点中除了存储数据元素本身之外，还需要两个指针；
		
		其中一个用于记录下一个节点的地址，叫做后指针；
		另外一个用于记录前一个节点的地址，叫做前指针；	
		
		头节点中的前指针后尾节点中的后指针都是空指针。


		(4) 双向循环链表   
		
		与双向线性链表类似，所不同的是让尾节点的后指针指向头节点，
		让头节点的前指针指向尾节点，首尾相接构成环状结构。

		(5) 数组链表(了解)
		
		链表中的每一个元素都是一个数组，也就是由数组构成的链表；

		(6) 链表数组(了解)
		
				/*概念问题*/
		字符数组 -- 数组中的每一个元素都是一个字符；
		整型数组 -- 数组中的每一个元素都是一个整形；
		结构题数组 -数组中的每一个元素都是一个结构体；
		指针数组 -- 数组中的每一个元素都是一个指针；
		链表数组 -- 数组中的每一个元素都是一个链表；


		(7) 二维数组(了解)
		
		二维数组 - 数组中的每个一个元素都是一个一维数组。
		e.g. 
			int arr[2][3] = {{1,2,3},{4,5,6}};// = {X,Y}


	1.3 变成实现单向线性链表的各种基本操作(/*重中之重*/)
		
		/*插入新元素到单链表指定位置:*/
		当pos = 1 时：
		pn->next = head->next;
		head->next = pn;
		当pos = 2 时：
		pn->next = head->next->next;
		head->next->next = pn;



//01list.c		
//6.3 插入新元素到指定位置
void list_push_pos(List* pl,int data,int pos){
    //1判断坐标的合法性
    if(pos < 0 || pos > list_size(pl)){
        printf("坐标不合法，插入元素%d失败\n",data);
        return ;
        //pos = 0;  //默认插入到开头位置
        //pos = list_size(pl);  //默认插入到末尾位置
    }   
    //2当pos = 0时，新元素插入到开头位置
    else if(0 == pos){
        list_push_head(pl,data);
    }   
    //3当pos = cnt时，插入到末尾位置
    else if(pos == list_size(pl)){
        list_push_tail(pl,data);
    }   
    //4当pos = pos时，采用归纳发插入到中间位置
    else{
        //创建新节点
        Node* pn = node_create(data);
        if(NULL == pn){
            printf("fail to create new node,program end\n");
            return ;
        }   
        //使用循环将相对于pos=1时多出来的next执行完
        Node* pt = pl->head;
        int i = 0;
        for(i = 1;i < pos;i++){
            pt = pt->next;//指向下一个节点。
        }   
        //编写pos = 1时的处理代码即可
        pn->next = pt->next;
        pt->next = pn; 
        //节点个数加1.
        pl->cnt++;
    }
}
*******************************
//main函数中调用
    printf("\n------------指定插入--------------------\n");
    list_push_pos(pl,88,-2);//插入88失败        
    list_travel(pl);        //66 55 44 33 22 11 77
    list_push_pos(pl,88,0);    
    list_travel(pl);        //88 66 55 44 33 22 11 77
    list_push_pos(pl,99,2);    
    list_travel(pl);        //88 66 99 55 44 33 22 11 77
    list_push_pos(pl,111,8);    
    list_travel(pl);        //88 66 99 55 44 33 22 11 111 77
    list_push_pos(pl,222,10);    
    list_travel(pl);        //88 66 99 55 44 33 22 11 111 77 222
    printf("单链表中有效元素的个数是:%d\n",list_size(pl));//11

    printf("\n----------------------------------\n");

		




		/*删除单链表指定位置元素*/

	
		当pos = 1 时
		Node* pt = head->next;
		head->next = pt->next;
		int temp = pt->data;
		free(pt);
		pt = NULL;
		cnt--;
		当pos = 2 时
		Node* pt = head->next->next;
		head->next->next= pt->next;
		int temp = pt->next->data;
		free(pt);
		pt = NULL;
		cnt--;
				
************************





//12 删除指定编号的元素
int list_pop_pos(List* pl,int pos){
    //1 判断坐标的合法性    
    if(pos < 0 || pos >= list_size(pl)){
        printf("坐标不合法，删除元素失败\n");
        return -1; 
    }   
    //2 当pos = 0时相当于删除头节点
    if(0 == pos){
        return list_pop_head(pl);
    }   
    //3 当pos = list_szie(pl) - 1时，相当于删除尾节点
    else if(pos == list_size(pl) - 1){ 
        return list_pop_tail(pl);
    }   
    //4 当pos = pos时，采用归纳发来删除指定节点。
    else{
        //1 使用临时指针替代head
        Node* pt = pl->head;
        //2 使用循环将pos = 1时多出来的next执行完
        int i = 0;
        for(i = 1;i < pos;i++){
            pt = pt->next;
        }   
        //3编写pos = 1时的代码
        Node* pm = pt->next;
        pt->next = pm->next;
        //4 使用临时变量记录哟啊删除节点的元素值
        int temp = pm->data;
        //5 释放节点的动态内存
        free(pm);
        pm = NULL;
        pl->cnt--;
        return temp;
    }   
}
**********************************
//Main函数中调用

    printf("\n------------指定删除--------------------\n");
    printf("单链表中删除的尾节点的元素是%d\n",list_pop_pos(pl,-2));//-1
    printf("单链表中删除的尾节点的元素是%d\n",list_pop_pos(pl,0));//66
    printf("单链表中删除的尾节点的元素是%d\n",list_pop_pos(pl,2));//44
    printf("单链表中删除的尾节点的元素是%d\n",list_pop_pos(pl,6));//77
    printf("单链表中头节点的元素是%d\n",list_get_head(pl));//99
    printf("单链表中尾节点的元素是%d\n",list_get_tail(pl));//111
    printf("单链表中有效元素的个数是:%d\n",list_size(pl));//6
    list_travel(pl);//99 55 33 22 11 111


************************************



	扩展训练:
		a.实现返回单链表中中间节点的元素值。
		b.实现闭环和开环操作(首尾相连)
		c.实现单链表中所有节点元素值的排序(从小到大)
		d.实现将两个有序单链表合并成一个有序单链表。
		e.实现逆转单链表中所有节点的次序以及逆序打印所有节点元素。
			(tip:使用递归算法)


	1.4 实际应用
		主要用于大量需要进行增删操作的场合中。



作业：
	1.复习理解单链表中的基本操作代码；
	2.将01list.c文件拆分为多文件结构，编写Makefile文件；

预习：
	1.二叉树
	2.算法

	





















