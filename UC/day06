/**************************************************************************/
*									   *		
*				day_06					   *	
*									   *
/**************************************************************************/




	一、内存管理技术
	二、文件的管理



						/*内存管理技术*/


	1. 内存管理技术
	1.1 常用的内存管理函数
	    
	    (1)getpagesize函数
		
		#include <unistd.h>
		int getpagesize(void);

	    函数功能:
		主要用于获取当前系统中一个内存页的大小并返回;



	    (2)sbrk函数
		#include <unistd.h>
		void *sbrk(intptr_t increment);


	    函数功能:
		主要用于根据参数的数值来调整动态内存的大小,具体方式如下:
	     	当increment > 0 时,表示申请动态内存;
		当increment = 0 时,表示获取当前动态内存的末尾地址;
		当increment < 0 时,表示释放动态内存,

	    函数调用成功时会返回调整之前的末尾地址,失败返回 (void*) -1


	注意:
	    a.虽然sbrk函数技能申请动态内存有能释放动态内存,
	      但是申请内存的操作更加方便一些;

	    b.一般来说,使用sbrk函数申请比较小块的动态内存时,操作系统一次性映射
	1个内存页大小的地址空间,当sbrk函数申请的动态内存超过1个内存页是,则操作系统
	会再次映射1个内存页,当sbrk函数释放所有动态内存时,操作系统不会保留映射的
	地址空间,
	
	因此和malloc()函数相比,更加节省内存空间,但是效率没有malloc()
	和free()函数高;




	    (3)brk函数
		#include <unistd.h>
		int brk(void *addr);

	    函数功能:
		主要用于将动态内存的末尾地址调整到参数指定的位置,方法如下:
		
		当addr > 动态内存原来的末尾地址时,表示申请动态内存;
		当addr = 动态内存原来的末尾地址时,表示动态内存不变;
		当addr < 动态内存原来的末尾地址时,表示释放动态内存;



	注意:
		虽然brk函数既能申请内存有能释放内存,但是是否那个内存更加方便,
	    因此一般情况下使用sbrk函数和brk函数搭配使用：
	/*	sbrk函数专门用于申请内存,brk函数专门用于释放内存;    */
		




	练习:
		使用sbrk和brk
	 首先申请一个int类型大小的存储空间,存放数据66,再申请一个double类型大小
	的存储空间存放3.14,再申请10个字节大小的字符串空间,存放数据"hello"
	最后打印上述数据内容，并释放全部动态内存。




	    (4)mmap函数
		#include <sys/mman.h>
		void *mmap(void *addr, size_t length, int prot, int flags,
                  int fd, off_t offset);
		
		第一个参数:用于指定映射的起始地址,给 NULL 由系统内核指定
		第二个参数:用于指定映射的大小
		第三个参数:用于指定映射的操作权限信息
			PROT_EXEC	-可执行
			PROT_READ	-可读
			PROT_WRITE	-可写
			PROT_NONE	-不可访问
			
		第四个参数:用于指定映射的标志位
			MAP_SHEARED	-共享的,写入映射区的数据直接反映到文件中
			MAP_PRIVATE	-私有的,写入~	~     ~不会反映到文件中
			MAP_ANONYMOUS	-表示映射到物理内存,此时忽略第五,六参数

		第五个参数:文件描述符,暂时给0即可;
		第六个参数:文件中的偏移量,暂时给0即可;
		
		返回值:成功返回被映射区域的首地址,
			失败返回MAP_FAILED(即(void*)-1)

	    函数功能:
		主要用于建立文件/设备到虚拟地址之间的映射;



	    (5)munmap函数
		#include <sys/mman.h>
		int munmap(void *addr, size_t length);
		
		第一个参数:要接解除射区域的首地址;
		第二个参数:要解除映射区域的大小;


	    函数功能:
		主要用于解除参数指定的映射;




	1.2 内存管理函数之间的层次关系
	   ^	
	   |
	标准C语言 => 使用malloc函数申请内存,使用free函数释放内存
	   |
	POSIX标准 => 使用sbrk函数申请内存,使用brk函数释放内存
 	   |
	操作系统  => 使用mmap函数建立映射,使用munmap函数解除映射	
	   |
	... ...
	  底层



						/*文件管理*/

	2. 文件管理	
	2.1 基本概念
	    在linux系统中,几乎可以把所有的一切都看作文件,包括目录、输入输出设备等
		/dev/null	-空设备文件
	    如:
		echo	回显命令		
		1)echo hello
		=> 输出hello字符串
	
		2)echo hello > a.txt
		=> 将输出的字符串hello写入到文件a.txt中
		cat a.txt 可以查看a.txt内容

		3)echo hello > /dev/null  /*用法一*/
		=> 将输出的字符串hello写入到文件/dev/null中,表示丢弃;

		4)cat /dev/null > a.txt  /*用法二*/
		=> 表示清空文件a.txt中的内容

		
	2.2 基本操作的相关函数(/*重点*/)
	
	    标C中文件操作函数:
			fopen()/fclose()/fread()/fwrite()/fseek();
		
		UC中的文件操作函数:
			open()/colse()/read()/write()/lseek() -- /*long seek*/;


		(1)open函数  
       #include <sys/types.h>
       #include <sys/stat.h>
       #include <fcntl.h>

       int open(const char *pathname, int flags);  //文件存在时用
       int open(const char *pathname, int flags, mode_t mode/*权限*/);

       int creat(const char *pathname, mode_t mode);//不存在时创建,存在时清空

		第一个参数：字符串形式的路径名,也就是路径和文件名
		第二个参数：具体的操作标志
				必须包括以下访问权限中的一个：
				O_RDONLY --	只读
				O_WRONLY -- 只写
				O_RDWR	 -- 可读可写
			除此之外,还可以 按位或 以下的标志:
				O_APPEND	-表示以追加的方式打开文件
				O_CREAT -表示文件不存在则创建,存在则打开
				O_EXCL	-与上面O_CREAT搭配使用,若不存在则创建,存在则创建失败
				O_TRUNC	-若文件存在则清空文件中的内容

		第三个参数：文件的权限信息,当创建新文件时,该参数可以用于指定新文件的权限
					信息,如：0664 => rw-rw-r--;//0表示八进制
					当打开打开一个已经存在的文件时，该参数可以忽略,不需要提供；

		返回值：成功返回新的文件描述符,失败返回-1；
		函数功能：
			主要用于打开/创建一个文件；


		注意：
       		creat() is equivalent to open() with flags equal to
       		O_CREAT|O_WRONLY|O_TRUNC.

		

//	扩展：
		使用ls -l a.txt 命令的执行结果如下：
		-rw-rw-r-- 1 tarena tarena 0  4月 13 15:19 a.txt
		其中
		-      rw-     rw-      r--       
	普通文件  属主权限 属组权限 其他用户权限	
	    1 		tarena 	 tarena 	0  		4月 13 15:19 	a.txt
		硬链接数 属主名称 属组名称 文件大小 最后一次修改时间  文件名称
	
	其中常见的文件类型有:
		-	表示普通规则文件
		d	表示目录文件
		... ...

	其中文件的权限信息有:
		r 	-可读	 4 
		w	-可写	 2
		x	-可执行	 1
		-	-无此权限 0



		(2)close函数 
       #include <unistd.h>
       int close(int fd);

		  函数功能：
			主要用于关闭参数指定的文件描述符,以至于该描述符不再关联任何一个文件,
		  该描述符可以被再次使用;



		(3)read函数 
       #include <unistd.h>
       ssize_t read(int fd, void *buf, size_t count);
		
		第一个参数：文件描述符,open函数的返回值;(从哪里读)
		第二个参数：缓冲区的首地址(存放到哪里)
		第三个参数：期望读取的字节数；

		返回值：成功返回实际读取到的字节数,0表示读取到了文件末尾 失败返回-1；

		函数功能：
			主要用于从指定的文件中读取数据到指定的缓冲区中；
	
		(4)write函数
       #include <unistd.h>
       ssize_t write(int fd, const void *buf, size_t count);

		第一个参数：文件描述符,open函数的返回值;(写入到哪里)
		第二个参数：缓冲区的首地址(写入的数据从哪里来)
		第三个参数：期望写入的字节数；		
		
		返回值：成功返回实际写入的数据大小,返回0表示啥也没有写入,失败返回-1；

		函数功能：
			主要用于将指定的数据内容写入到指定的文件中；



		练习：
			vi 07read.c
				编程读取文件c.txt中的内容并打印出来




	作业：
		a. vi 09write_emp.c 文件 要求定义一个员工类型的结构体变量并且进行初始化,将该员工信息写入到文件emp.dat中，其中员工的信息主要有：员工的编号。员工的姓名，员工的薪水；
		b. vi 10read_emp.c 文件，要求读取emp.dat中员工信息，并打印出来；

		c.查询fcntl函数；





















