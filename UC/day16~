/**************************************************************************/
*															    		  *	
*								day_16					   				  *	
*									   									  *
/**************************************************************************/




					
	1. 基于TCP协议的通信模型(/*重点*/)
	1.1 通信模型
			
		服务器：
				(1)创建socket,使用socket函数；
				(2)准备通信地址,使用结构体类型;
				(3)绑定socket和通信地址,使用bind函数;
				(4)监听,使用listen函数;
				(5)响应客户端的连接请求, accept
				(6)进行通信,使用send/recv函数：
				(7)关闭socket,使用close函数;

		客户端：
				(1)创建socket,使用socket函数；
				(2)准备通信地址,使用服务器的地址;
				(3)连接socket和通信地址,使用connect函数;
				(4)进行通信,使用send/recv函数：
				(5)关闭socket,使用close函数;

	1.2 相关函数的解析
		(1)listen函数
	       #include <sys/types.h>          /* See NOTES */
	       #include <sys/socket.h>

	       int listen(int sockfd, int backlog);

			第一个参数：socket描述符,socket函数的返回值
			第二个参数：用于指定悬而未决的连接队列的最大长度
						(已经发送连接请求,但是没有来得及响应的最大数量)
		
			函数功能：
				主要用于监听指定socket上的连接请求,当调用该函数后,该函数会将
			  sockfd所指向的socket标记为被动socket，所谓的被动socket就是专门
		  	  用于使用accept函数接收即将到俩的连接请求,也就是不能用来通信了。


		(2)accept函数
    	   #include <sys/types.h>          /* See NOTES */
    	   #include <sys/socket.h>

	       int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

			第一个参数：socket描述符，socket函数的返回值
			第二个参数：结构体指针,用于带出接受的客户端通信地址
			第三个参数：指针类型,用于带出通信地址的大小
			
			返回值：成功返回用于通信的socket描述符,失败返回-1

			函数功能：
				主要用于提取listen函数标记的socket中,悬而未决队列中第一个连接请求
			  创建一个新的socket用于和接受的客户端进行通信,该socket并不会处于
		  	  监听的状态;
	

		(3)send函数
	       #include <sys/types.h>
	       #include <sys/socket.h>
	
	       ssize_t send(int sockfd, const void *buf, size_t len, int flags);

		第一个参数：socket描述符,accept函数的返回值
		第二个参数：具体的缓冲区首地址(存放的是即将发送的数据内容)
		第三个参数：即将发送的数据大小
		第四个参数：发送的标志,默认给 0 即可

		返回值：成功返回实际发送的数据大小,失败返回-1

		函数功能：
			主要用于将指定的消息发送到指定的socket上;

		(4)recv函数
	       #include <sys/types.h>
	       #include <sys/socket.h>
	
	       ssize_t recv(int sockfd, void *buf, size_t len, int flags);
		第一个参数：socket描述符,accept函数的返回值
		第二个参数：缓冲区的首地址,用于存放接收到的消息
		第三个参数：期望接收的数据大小
		第四个参数：具体的接收方式,默认给 0 

		返回值：成功返回实际接收的数据大小,失败返回-1;
				当对方关闭时,该函数的返回值为 0;

		函数功能：
			主要用于从指定的socket上接收指定的消息；


	练习：
		使用基于tcp协议的通信模型实现一对多的通信：
	  a.要求服务器可以不断地响应客户端的连接请求
			=> 使用无限循环
	  b.要求服务器可以同时和多个客户端通信
			=> 使用fork函数创建子进程来实现和客户端的通信
	  c.要求服务器可以和每个客户端都可以不断的通信
			=> 无限循环
	  d.当客户端发来"bye"时,表示客户端已下线
			=> 使用strcmp函数比较,终止对应的子进程
	  e.要求服务器不停的工作,知道用户按下ctrl+c；
			=> 使用signal函数实现对SIGINT的自定义处理





	2. TCP协议和UDP协议的比较
	2.1 TCP协议的概念和特性(Transfer Control Protocol)
		TCP 	-传输控制协议,是一种面向连接的协议,类似打电话
			-建立连接 => 进行通信 => 断开连接
			-在通信的整个过程中全程保持连接。
			-该协议保证了数据传递的可靠性和有序性.
			-实现了流量的控制,避免发送方发送过多数据导致接收方缓冲区溢出;	
			-属于全双工的字节流通信方式;	

		  	-服务器压力比较大,资源消耗比较高,执行效率比较低


	2.2 UDP协议的概念和特性
		UDP		-用户数据包协议,非面向连接的协议,类似写信
			-在通信的整个过程中不需要保持连接
			-不保证数据传递的可靠心和有序性
			-没有实现流量的控制
			-属于全双工的数据报通信方式;
			-服务器压力比较小,资源消耗比较低,执行效率比较高.
			


	3. 基于UDP协议的通信模型(/*重点*/)
	3.1 通信模型
		服务器：
				(1)创建socket,使用socket函数
				(2)准备通信地址，使用结构体类型;
				(3)绑定socket和通信地址,使用bind
				(4)进行通信,使用send/recv/sendto/recvfrom函数
				(5)关闭socket，使用close函数

		客户端：
				(1)创建socket,使用socket函数
				(2)准备通信地址，使用服务器地址;
				(3)进行通信,使用send/recv/sendto/recvfrom函数
				(4)关闭socket，使用close函数
	
	3.2 相关函数的解析
		(1)sendto函数
       #include <sys/types.h>
       #include <sys/socket.h>

       ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
                      const struct sockaddr *dest_addr, socklen_t addrlen);


		
		函数功能：
			主要用于将指定的消息发送到指定的目标地址上,其中前四个参数以及返回值
		  和send函数完全一致,第五个参数用于指定收件人的通信地址信息,第六个参数
		  用于指定通信地址的大小;


		(2)recvfrom函数
       #include <sys/types.h>
       #include <sys/socket.h>

       ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,/*0*/
                        struct sockaddr *src_addr, socklen_t *addrlen);


		函数功能：
			主要用于接收发来的消息,并保存消息发送方的通信地址,其中前四个参数以及
		  返回值和recv函数完全一致,第五个参数用于保存消息发送方的通信地址,第六个
		  参数用于保存通信地址的大小.


		

		作业：
			使用UDP协议的通信模型编写一个时间服务器,也就是只要服务器收到客户端
		  发来的消息，则将本机系统时间发送给客户端;




















