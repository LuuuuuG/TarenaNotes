/**************************************************************************/
*															    		  *	
*								day_11					   				  *	
*									   									  *
/**************************************************************************/




	
				/*进程管理*/



	1. 进程管理
	1.1 进程管理的其他函数 
	
		(1)vfork函数
       #include <sys/types.h>
       #include <unistd.h>
       pid_t vfork(void);



		函数功能：
			主要用于创建当前正在调用进程的子进程,有关详细情况以及返回值和
		  错误信息参考fork函数即可;
			该函数创建子进程时不会复制父进程中的内存空间,而是直接占用,导致父进程
		  被挂起,直到子进程终止或者调用exec系列函数为止,而子进程终止的方式不可以
		  是：从当前函数返回(结果不可预测) 以及调用exit()函数(可能会调用注册函数)
		  而应该调用_exit()函数来终止;

				/*   vfork函数保证了子进程先执行		*/



		(2)exec系列函数

       #include <unistd.h>
       int execl(const char *path, const char *arg, ...);

		第一个参数：字符串形式的路径名
		第二个参数：字符串形式的参数,一般指定具体的执行方式
		第三个参数：可变长参数,最后使用 NULL 作为结尾标志


		返回值：只有出错时才有返回值,并且返回-1；
		
		函数功能：
			主要用于执行参数指定的文件,类似与跳转的功能函数；

/*
		注意：
			vfork函数本身没有太大的实际意义,一般与exec系列的函数搭配使用,
		该用法主要用于子进程需要执行与父进程完全不同的代码段的场合中;
			其中vfork函数专门用于创建子进程,exec系列函数专门用于执行全新的代码段
			
			fork函数虽然也可以与exec系列函数搭配使用,但是fork函数创建的子进程会
		复制父进程中的内存区域,因此会影响效率;

*/

			/*	vfork	*/


		(3)system函数
       #include <stdlib.h>
       int system(const char *command);

		函数功能：
			主要用于执行参数指定的shell命令,成功返回i命令的状态信息,失败返回-1






				/* 信号处理 */

	2. 中断的概念和分类
		中断就是指停止当前程序的执行转而执行其他程序或者处理意外情况的过程；

		中断分为两种： 硬件中断  和  软件中断；


	3. 信号的处理
	3.1 基本概念和特性
		(1)基本概念
			信号本质就是一种软件中断,它既可以作为两个进程间通信的一种方式,
		  也可以中断一个程序的执行,它更多地被用于处理意外情况;

				
		(2)基本特性
			a.信号是异步的,进程并不知道信号何时会到达;
			b.进程既可以处理信号,也可以发送信号;
			c.每个信号都有一个名字,使用SIG开头;
		

	3.2 基本命令和分类

		kill -l 表示现实当前系统所支持的所有信号

		在linux系统中支持的信号范围是1~64,不保证连续,
		其中1~31之间的信号叫做不可靠信号,不支持排队,信号可能会丢失,也叫非实时信号
		其中34~64之间的信号叫做可靠信号,支持排队,信号不会丢失,也叫实时信号;


		要求掌握的信号：
			SIGINT	2	采用 ctrl+c	来产生该信号,默认处理方式为终止进程
			SIGQUIT	3	采用 ctrl+\	来产生该信号,默认处理方式为终止进程
			SIGKILL	9	采用 kill -9  产生,	默认处理方式为终止进程



	3.3 信号的处理方式
		(1)默认处理, 绝大多数信号的默认处理方式都是终止进程;
		(2)忽略处理
		(3)自定义处理/捕获处理



//		signal函数

       #include <signal.h>

       typedef void (*sighandler_t)(int);
       sighandler_t signal(int signum, sighandler_t handler);


		函数原型解析如下：
		typedef void (*sighandler_t)(int);
	=>typedef void (*)(int)	sighandler_t;

		sighandler_t signal(int signum, sighandler_t handler);
	=>	/*返回值为函数指针*/				/*第二实参为函数指针*/	

	最正宗的形状：
	=>void (*signal(int signum,void(*handler)(int)))(int);

	=>signal是一个函数
	  具有两个参数：一个参数是int类型,另外一个是函数指针类型
	  返回值类型是函数指针类型；

	=>	第二个参数和返回值类型的解析：
		是一个指向参数为int类型,返回值为void类型的函数的指针;
	

	函数功能解析如下：
		第一个参数：信号值/信号的名称(表示对哪个信号处理)
		第二个参数：函数指针类型,用于指定处理方式(怎么处理)
			SIG_IGN	-忽略处理
			SIG_DFL	-默认处理
			自定义函数的地址	-自定义处理
		

		返回值；成功返回之前的处理方式
				失败返回SIG_ERR;
		函数功能：	
			主要用于设置指定信号的处理方式;



	练习：
		使用signal函数设置对信号2进行自定义处理,设置对信号3进行忽略处理,
	再使用fork函数创建子进程,打印子进程的进程号后,子进程进入无限循环,父进程直接结束
	另起一个终端使用kill命令发送信号2 3 9 给子进程,观察处理结果；

		kill -2 ...






	3.4 父子进程对信号的处理方式

		(1)对于fork函数创建的子进程来说,子进程完全照搬父进程中对信号的处理方式
			即：父进程默认/忽略/自定义,子进程也默认/忽略/自定义;


		(2)对于vfork()和execl()函数启动的子进程来说,
			父进程默认/忽略， 子进程也默认/忽略。
			父进程自定义时，子进程采用默认处理(子进程跳出去了 没有自定义函数)。




	3.5 发送信号的方式
		(1) 采用键盘发送信号(只能发送部分特殊的信号)
			ctrl + c	发送SIGINT	2
			... ...
		
		(2) 程序出错发送信号(只能发送部分特殊的信号)
			段错误 引起 信号 SIGSEGV	11
			... ...

		(3) 使用kill命令发送信号(全部信号都可以发)
			kill -信号值	 进程号
			kill -9 3302

		(4) 采用系统函数发送信号(发送大部分信号)
			kill()/raise()/alarm()/sigqueue()



	3.6	发送信号的函数解析
		(1)kill函数	
    	   #include <sys/types.h>
    	   #include <signal.h>
	       int kill(pid_t pid, int sig);

		第一个参数：进程号(给谁发信号)
				>0 表示发送信号sig给进程号为pid的进程(单发/*重点*/)
				=0 表示发送信号sig给和当前正在调用进程在同一个进程组的每一个进程
					(群发  了解)
				=-1 表示发送信号sig给每一个当前进程拥有拥有发送信号权限的进程
					除了进程1(init)(群发，了解)
				<-1 表示发送信号sig给进程组ID为-pid的每一个进程(群发,了解)
				

		第二个参数：信号值/信号名称(发送什么杨的信号)
				=0 表示不会发送信号,只是检查指定的进程是否存在
				
	
		函数功能：
			主要用于给指定的进程发送指定的信号；


		(2)raise函数
       #include <signal.h>

       int raise(int sig);


		返回值：成功调用时返回0,失败返回非0；
		
		函数功能：
			主要用于给当前正在调用的进程/线程发送参数指定的信号,对于单线程的程序
		来说,等价于kill(getpid(),sig);
			


		(3)alarm函数
	
       #include <unistd.h>
       unsigned int alarm(unsigned int seconds);

		返回值：
				如果之前有闹钟则返回之前闹钟没有来得及响的剩余秒数,否则返回0；

		函数功能：
			主要用于经过参数指定的秒数后给当前正在调用的进程发送SIGALRM信号,
		  如果参数为0,则表示没有新的闹钟被设置,每次设置新闹钟时都会取消之前的闹钟
			



		(4)sleep函数
	       #include <unistd.h>
	       unsigned int sleep(unsigned int seconds);



		函数功能：
			主要用于使得当前正在调用的进程进入睡眠状态,当指定的描述睡狗了则返回0
			当指定的描述没有睡狗但一个不能忽略的信号到来了,则返回剩余没有来得及
			睡的秒数；









