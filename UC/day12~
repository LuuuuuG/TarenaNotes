/**************************************************************************/
*															    		  *	
*								day_12					   				  *	
*									   									  *
/**************************************************************************/




		1. 信号的处理
		1.1 信号集的基本概念和基本操作
			(1)基本概念
				信号集本质就是由若干个信号组成的集合;

		思考：
			如何采用最节省内存的方式来设计信号集的数据类型？
			int arr[64]; => 4*64 =256 
			short arr[64]; => 2*64 =128
			char arr[64]	=>  1*64 =64
			从采用每一个二进制位代表一个信号	=>	64个二进制位 = 8 个字节

			... ... 0010 0111  => 信号 1、2、3、6

		结论：
			操作系统中提供的信号集是：sigset_t 类型,底层是一个超级大的整数,采用
		 每一个二进制位来代表该信号是否存在,其中0表示该信号不存在,1表示该信号存在;
			//   sizeof(sigset_t) = 128  (多出来120个字节是为了以后的可扩展性)

		sigset_t 的结构：

typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;	 /* 4   *  (1024 / ( 8 * 4 )) = 128   */

typedef __sigset_t sigset_t;

		/*	采用结构体+数组 可以自定义超级大的数字	*/




		(2)基本操作
			sigemptyset()	-主要用于清空信号集
			sigfillset()	-主要用于填满信号集
			sigaddset()		-增加信号到信号集中
			sigdelset()		-删除信号集中指定的信号
			sigismember()	-判断信号是否存在于信号集中

       #include <signal.h>

       int sigemptyset(sigset_t *set);

       int sigfillset(sigset_t *set);

       int sigaddset(sigset_t *set, int signum);

       int sigdelset(sigset_t *set, int signum);

       int sigismember(const sigset_t *set, int signum);
			返回值：
					1		-signum存在
  					0		-signum不存在
				   -1		-错误
		



	1.2 信号的屏蔽

			在某些特殊程序的执行过程中,是不能被信号打断的,
			此时需要使用信号的屏蔽技术来解决该问题;

		(1)	sigprocmask函数
       #include <signal.h>

       int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);

			第一个参数：具体的屏蔽方式(怎么屏蔽)
						 SIG_BLOCK	-表示进程中已经屏蔽的信号集+参数set的信号集
					如：  (ABC+CDE => ABCDE)						
						 SIG_UNBLOCK	-表示进程中已经屏蔽的信号集-参数set信号集
						  (ABC-CDE=> AB)
						 SIG_SETMASK 	-表示进程中已经屏蔽的 被参数set信号集替代
							(ABC  CDE => CDE)
			第二个参数：信号集类型的指针,用于传递新的信号集
			第三个参数：信号集类型的指针;
					如果该参数不为空，则带处设置之前进程已经屏蔽的信号集
					如果该参数为空,则啥也不会带出;
		函数功能：
			主要用于提取/修改当前进程中的信号屏蔽集合;


		注意：
			信号屏蔽并不是信号的删除，只是相当于用一个隔板将所有屏蔽的信号阻挡起来
		  对于可靠信号来说,发送多少次则排队等待的就是多啥个信号;
		  对于不可靠信号来说，无论发送多少次,排队等待的信号只有1个；
		当信号屏蔽被解除时,相当于将阻挡的隔板移开,因此所有阻挡的信号都会被以此处理;
		/*信号从大到小处理*/



		(2)sigpending函数		// ???

   		   #include <signal.h>
    	   int sigpending(sigset_t *set);



		函数功能：
			只要用于获取信号屏蔽期间来过但没有来得及处理的信号,将所有获取到的信号
		  存放在参数指定的信号集set中,通过参数带出去;
	




		1.3 sigaction函数 => signal函数的增强版
       #include <signal.h>
       int sigaction(int signum, const struct sigaction *act,
                     struct sigaction *oldact);

		
		第一个参数：信号值/信号名称(设置哪个信号的处理方式)
			可以指定任何有效的信号,但是不能指定 SIGKILL 和 SIGSTOP

		第二个参数：结构体指针,用于指定信号的最新处理方式
		
        struct sigaction {
          void     (*sa_handler)(int);//与下面的sa_sigaction 二者选其一
				/*
				=>函数指针类型,主要用于设置信号的处理方式
				=>取值可以是：SIG_DFL SIG_IGN 自定义函数地址
				=>与signal函数的第二个参数取值一样,类型一样*/
          void     (*sa_sigaction)(int, siginfo_t *, void *);
				/*
				=> 函数指针类型,主要用于设置信号的处理方式
				=> 取值可以是：SIG_DFL SIG_IGN 自定义函数地址
				=> 是否选用该成员设置信号的处理方式,取决于第四个成员
				*/
          sigset_t   sa_mask;
			//  => 主要用于设置在执行信号处理函数期间需要屏蔽的信号集
			//	=> 自动屏蔽与出发信号处理函数相同的信号(除非flag中设置SA_NODEFER)
          int        sa_flags;
			//  =>取值为 SA_SIGINFO  表示选择第二个函数指针作为信号的处理函数
			//  =>       SA_NODEFER	 表示解除对触发信号处理函数信号的屏蔽 
			//  =>		 SA_RESETHAND 表示一旦调用信号处理函数则回复默认处理方式
          void     (*sa_restorer)(void); 
			//  => 过时/保留的成员,暂时不被使用
        };
	

		第三个参数：结构体指针,用于带处设置之前的信号处理方式
		
		函数功能：
			主要用于检查和修改指定信号的处理方式;



		其中结构体中第二个成员中的第二个参数类型如下：
			
           siginfo_t {
				... ...
               pid_t    si_pid;      /* Sending process ID */
               sigval_t si_value;    /* Signal value(伴随信号到来的附加数据)*/
				... ...
           }




		1.4 sigqueue函数
	       #include <signal.h>
    	   int sigqueue(pid_t pid, int sig, const union sigval value);

			第一个参数：进程的编号(给谁发信号)
			第二个参数：具体的信号值/信号名称(发送生么样的信号)
			第三个参数：伴随信号的附加数据
				
	           union sigval {
    	           int   sival_int;
    	           void *sival_ptr;
    	       };

		函数功能：
			主要用于想指定的进程发送指定的信号和附加数据：
		


		1.5 计时器(/*让贪吃蛇动起来*/)
			在linux系统中,为每个进程都维护三种计时器,分别为：真实计时器、
		虚拟计时器、以及实用计时器,一般采用真实计时器进行计时;

//			setitimer

       #include <sys/time.h>

       int getitimer(int which, struct itimerval *curr_value);
       int setitimer(int which, const struct itimerval *new_value,
                     struct itimerval *old_value);


		第一个参数：计时器的类型(选用哪一种计时器)
			ITIMER_REAL 	-真实计时器,统计进程执行的真实时间;
							-该计时器通过产生SIGALRM信号进行工作的;

			ITIMER_VIRTUA	-虚拟计时器,统计进程在用户态消耗的时间
							-该计时器通过产生SIGVTALRM信号进行工作的;

			ITIMER_VIRTUA 	-实用计时器,统计进程在用户态和内核态下共同消耗的时间
							-该计时器通过产生SIGPROF信号进行工作；

		第二个参数：结构体指针,用于设置计时器的新值。

           struct itimerval {
               struct timeval it_interval; /* next value(间隔时间) */
               struct timeval it_value;    /* current value(启动/开始时间) */
           };

           struct timeval {
               long tv_sec;                /* seconds */
               long tv_usec;               /* microseconds(1微秒) = 10^-6 */
           };


		第三个参数：结构体指针,用于带出计时器之前的旧值。

		函数功能：
			主要用于获取/设置计时器的参数信息；






	2. 进程见的通信技术
	2.1 基本概念
		两个进程之间的信息交互 叫做进程见的通信；

	2.2 常用的进程间通信技术
		(1)文件
		(2)信号
		(3)管道(了解)
		(4)共享内存
		(5)消息队列(重点)
		(6)信号量集
		(7)网络(重点)
		... ...
		其中(4)(5)(6)三种通信方式统称为 XSI IPC通信方式
		(X/open System Interface Inter-Process Communication)




	作业：
		使用计时器技术让控制台版的贪吃蛇动起来；


















