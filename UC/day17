/**************************************************************************/
*															    		  *	
*								day_17					   				  *	
*									   									  *
/**************************************************************************/




	1. 多线程的基本概念和基本操作
	1.1 基本概念
		目前主流的操作系统都支持多进程，而每一个进程的内部又可以支持多线程,也就是说
	  线程是隶属于进程内部的程序流,同一个进程中的多个线程并行处理;

		进程是重量级的，每个进程都需要独立的内存空间，因此新建进程对于资源的消耗
	  比较大；而线程是轻量级的，新建线程会共享所在进程的内存资源，但是每个线程
	  都拥有一块独立的栈区；

	1.2 线程的创建
		(1)pthread_create函数
       #include <pthread.h>

       int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg);


		第一个参数：用于存放新线程的编号；
		第二个参数：用于指定线程的属性，给 NULL 表示采用默认属性；
		第三个参数：函数指针类型，用于指定新线程的处理函数；
		第四个参数：指针类型,用于给第三个参数指向的函数传递实参；

		返回值：成功返回0，失败返回具体的错误编号；//strerror 将参数指定的错误编号进行翻译

		函数功能：
			主要用于在当前正在调用的进程中启动一个新线程；

      // Compile and link with -pthread.

		(2)线程之间的关系
		  执行main函数的起始线程 叫做 主线程；
		  使用pthread_create函数创建出来的新线程 叫做 子线程
		  当子线程创建成功后,两个线程各自独立运行，子线程执行对应的线程处理函数
		，主线程继续向下执行，两个线程之间的执行先后次序有操作系统调度算法决定；
			
		  两个线程之间相互独立，又相互影响，当主线程结束时，会导致整个进程结束；
		  当整个进程结束时，又会导致所有线程结束；

			typedef unsigned long int pthread_t;

	//printf("主线程中：tid = %lu,主线程自己的ID = %lu\n",tid,pthread_self());

	1.3 线程编号的获取和比较
		(1)pthread_self函数
       #include <pthread.h>

       pthread_t pthread_self(void);

		函数功能：
			主要用于获取当前正在调用线程的编号,并通过返回值返回；
      // Compile and link with -pthread.


		(2)pthread_equal函数
       #include <pthread.h>

       int pthread_equal(pthread_t t1, pthread_t t2);

	   //  Compile and link with -pthread.

		函数功能：
			主要用于比较两个参数指定的线程ID是否相等,如果相等则返回非0，否则返回0


	练习：
		使用pthread_create函数创建一个子线程，在子线程的线程处理函数中根据参数传入
	  的半径计算周长和面积并打印出来,而其中存放半径的内存空间有main函数中调用sbrk
	  函数申请，并由用户手动输入；



	1.4 线程的等待和分离
		(1)pthread_join函数
		
       #include <pthread.h>

       int pthread_join(pthread_t thread, void **retval);
		
		第一个参数：具体的线程ID
		第二个参数：用于获取线程的推出状态信息
		

		函数功能：
			主要用于等待参数thread指定的线程终止，如果参数thread指向的线程终止了，
		  则该函数立即返回，当然要求该线程必须是可汇合的/可等待的；
			如果第二个参数不为空,则该函数会将目标线程的推出状态信息拷贝到*retval
		  指向的位置中，也就是以及指针的内容；
		

       	// Compile and link with -pthread.		


	练习：
		使用pthread_create函数创建子线程,在线程处理函数中计算1~100之间的和并放到
	  变量sum中,返回sum变量的地址,在主线程中调用pthread_join函数等待子线程结束，
	  并获取退出状态信息,打印出来
		vi 04join.c


		(2)pthread_detach函数
       #include <pthread.h>

       int pthread_detach(pthread_t thread);

		函数功能：
			主要用于将参数指定的线程设置为分离状态的线程,当一个分离状态的线程
		  终止时,它的资源会被自动释放给系统,不需要其它线程来汇合/帮助,即分离状态
		  的线程无法被pthread_join函数所等待/汇合；

      // Compile and link with -pthread.

	

	1.5 线程的终止和取消
		(1)pthread_exit函数
       #include <pthread.h>

       void pthread_exit(void *retval);

		函数功能：
			主要用于终止当前正在调用的线程，并通过参数返回当前线程的退出状态
	信息,可以使用同一个进程中的其他线程调用pthread_join函数来获取该退出状态信息；

      // Compile and link with -pthread.


	练习：
		vi 05exit.c 启动子线程，子线程的线程处理函数中负责打印1-20之间的整数，每隔1秒打印一次,当i的值为10时，终止当前线程，并返回i的数值，主线程负责等待并获取推出状态信息，最后打印出来；
	


		(2)pthread_cancel函数
       #include <pthread.h>

       int pthread_cancel(pthread_t thread);

		函数功能：
			主要用于给参数指定的线程发送取消的请求，默认情况下是可以被取消的，
		  是否被取消以及何时被取消可以通过以下两个函数进行设置；
      	
		 int pthread_setcancelstate(int state, int *oldstate);
			第一个参数：用于指定最新的状态 
				PTHREAD_CANCEL_ENABLE 	-可以被取消(默认)
			    PTHREAD_CANCEL_DISABLE	-不可以被取消

			第二个参数：用于带出设置之前的状态信息,给 NULL 表示不带出

       	 int pthread_setcanceltype(int type, int *oldtype);
			第一个参数：用于指定线程的新类型
				PTHREAD_CANCEL_DEFERRED			-延迟取消(默认)
				PTHREAD_CANCEL_ASYNCHRONOUS		-立即取消
			第二个参数：用于带出旧类型，不想带出给 NULL 即可;
						

		//  Compile and link with -pthread.





	2. 线程的同步问题
	2.1 基本概念
		多线程共享所在进程的资源，当多个线程同时访问同一种共享资源时，需要相互协调
	  以避免造成数据的不一致和不完整问题，而线程之间的协调和通信叫做线程的同步问题


	2.2 使用互斥量实现线程的同步
		(1)定义互斥量
			pthread_mutex_t mutex;
		(2)初始化互斥量
			pthread_mutex_init(&mutex,NULL);
		(3)使用互斥量进行加锁
			pthread_mutex_lock(&mutex);
		(4)访问共享资源
		(5)使用互斥量进行解锁
			pthread_mutex_unlock(&mutex);
		(6)如果不再使用，则删除互斥量
			pthread_mutex_destroy(&mutex);



	2.3 使用信号里实现线程的同步
		信号量	-本质就是一个计数器,用于控制同时访问一种共享资源的进程/线程个数；

		当信号量的初始值为1时，效果等同于互斥量

		#include<semaphore.h>
		(1)定义信号量
			sem_t sem;
		(2)初始化信号量
			sem_init(&sem,0,信号量的初始值);
		(3)获取信号量,也就是信号量数值-1
			sme_wait(&sem);
		(4)访问共享资源
		(5)释放信号量,也就是信号量数值+1
			sem_post(&sem);
		(6)如果不再使用，则删除信号量
			sem_destroy(&sem);



	作业：
		(1)编程实现基于tcp协议通信模型的简易聊天室
			(服务器每次收到的消息转发给其他所有在线的客户端)day16 02tcpA.c
			=> 参考课堂上讲过的一对多通信模型案例
			=> 要求采用多线程技术替换多进程技术
			=> 要求客户端启动时输入一个昵称；
			=> 要求客户端收发消息功能各自独立执行；(2个线程 一个收一个发)
			
		(2)在上述案例的基础上实现文件的传输
		(3)采用多线程和网络编程重构银行账户管理系统



