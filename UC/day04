/**************************************************************************/
*									   *		
*				day_04					   *	
*									   *
/**************************************************************************/


	一、C语言中的错误处理
	二、环境标的概念和使用
	三、内存管理技术


	
			/*C语言中的错误处理*/
			
	1. C语言中的错误处理:			
   	    如:
		int main(){
		    if(...){
			return -1; //表示程序出错结束
		    }
		    return 0;  //表示程序正常结束
		}				
		
	1.1 C语言中的错误表现形式(错了么？)
	    一般来说,C语言中都是通过函数的返回值来表示该函数调用是否出错,
  	  而返回值的一般表现形式如下:
		(1) 对于返回值类型是/*int类型*/的函数,并且函数的计算结果
	  	不可能是负数时,一般使用返回 -1 表示出错,其他数据表示正常结束。

		(2) 对于返回值是/*int类型*/的函数,但是函数的计算结果可能是负数时，
		使用指针作为函数的形参类型,将函数的计算结果带出去,而函数的返回值
		专门用于表示是否出错,习惯上使用 0 表示正常结束,使用 -1 表示出错;

		(3) 对于返回值类型是/*指针*/的函数来说,一般使用返回 NULL 表示函数出错
		其他数据表示正常结束;

		(4) 对于不考虑是否出错的函数来说,返回值类型用 void 即可;



	[练习]
		按照上述4个规则,编写以下4个功能函数,
	    a.生成1~10 之间随机数并返回,如果随机数是5则返回错误;
	    b.比较两个int类型参数的大小并返回最大值,如果相等则返回错误;
	    c.判断传入的字符串是否为"error" 如果是则返回错误,否则返回"ok"
	    d.打印传入的字符串即可;


	1.2 错误编号(为什么错了？)

	    判断函数是否调用失败,根据函数的返回值进行判断;
	    当函数一旦调用失败时,希望知道失败的原因则查看errno的值，
	    errno本质就是一个int类型的全局变量,当/*库函数调用出错时*/,
	    会自动设置errno的值来表示错误的原因;
		#include <errno.h> -实现了对errno外部变量的声明,并且包含了一些
		其他头文件,里面拥有errno的取值范围等信息。

/*
		   /etc/passwd -主要包含了账户的管理信息
		   /etc/shadow -主要包含了账户的密码及管理信息
*/

		tarena: x : 1000   :  1000   : tarena,,,:/home/tarena:/bin/bash
    	        用户名:密码:用户编号:用户组编号:注释信息:用户主目录  :shell的类型

	
		 


	1.3 错误信息(对错误编号的翻译)
	    (1)strerror
		#include <string.h>
		char *strerror(int errnum);

	    函数功能:
`		主要用于将参数指定的错误编号进行翻译,将翻译得到的字符串
		通过返回值返回。


	    (2)perror函数(/*重中之重*/)
		#include <stdio.h>
	        void perror(const char *s);
			    /* 理论可以传任何字符串参数,习惯传函数名~ */	


	    函数功能:
		主要用于打印具体的错误信息,参数指向的字符串会原样打印,紧跟着
		冒号、空格、错误信息以及自动换行;


	    (3)printf函数(了解、不常用)
		printf("%m");



	NOTE: 
	    不能直接使用errno的数值来作为判断函数是否出错的依据,因为errno会保留
	之前的错误编号,也会随时发生改变,因此判断函数是否出错还是需要依据函数的
	返回值,而只有明确函数已经出错的情况下,可以依据error来获取错误的原因;

	







				/*环境表*/

	2. 环境表的概念和使用
	2.1 基本概念
	    环境表本质就是环境变量的集合,每个进程内部都拥有一张独立的环境表信息，
	  用于记录专属于该进程的环境信息;
	    环境表就是一个以空指针作为结尾的字符指针数组,其中每个指针都指向
	  一个格式为"变量名=变量值"的字符串,该指针数组的首地址保存在全局变量  		  char** environ中,因此通过访问全局变量environ可以遍历整个环境表信息;
		
	练习:
		找到SHELL的环境变量



**********************
//遍历环境表
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int main(){
    //声明外部的全局变量
    extern char** environ;
    //指定零食变量代替environ进行遍历
    char** ppv = environ;
    while(*ppv != NULL){
        //打印字符串内容
        printf("%s\n",*ppv);
        //指向下一个字符串
        ppv++;
    }   
    
    printf("------------------------------\n");
    /*练习:找到SHELL的环境变量，将环境变量SHELL的变量值取出来放到自定义数组buf中,打印buf中的内容
    */
    ppv = environ;
    char buf[10] = {}; 
    while(NULL != *ppv){
        if(!strncmp("SHELL",*ppv,5)){
            strcpy(buf,*ppv+6);
            break;//跳出循环
        }   
        ppv++;
    }   
    printf("%s\n",buf);
    return 0;
}

***********************




	2.2 基本操作的相关函数
	    (1)getenv函数		
 		 #include <stdlib.h>
		 char *getenv(const char *name);

	    函数功能:
		主要用于根据参数指定的环境变量名来查找整个环境表,查找成功时
	    返回该变量名所对应的变量值,查找失败时返回 NULL;


	    (2)setenv函数
 		 #include <stdlib.h>
		 int setenv(const char *name,const char *value, int overwrite);


		第一个参数:字符串形式的环境变量名
		第二个参数:字符串形式的环境变量值
		地三个参数:是否修改的标志
			    非0 -修改
			    0   -不修改
		返回值: 成功返回 0，失败返回 -1 ，并且设置errno来指示错误原因。
		函数功能:
		    主要用于修改/增加环境变量;





	    (3)unsetenv函数
		#include<stdio.h>
		int unsetenv(const char* name);

	    函数功能:
		主要用于从环境表中删除参数指定的环境变量,如果该环境变量不存在,
		则函数调用是成功的，环境没有发生改变;



	    (4)putenv函数
		#include <stdlib.h>

       		int putenv(char *string);
	    
	    返回值:成功返回0 ，失败返回非0；
	    函数功能:
		主要用于增加/修改参数指定的环境变量,参数的格式为:
	    name=value， 当该变量不存在时则增加,否则则修改；



	    (5)clearenv函数
		#include <stdlib.h>

		int clearenv(void);

		
	    函数功能:
		主要用于清空环境表中所有的环境变量对,并且让全局变量environ也置为
		空指针,成功返回0,失败返回非0；



	2.3 main函数的原型(了解)
	    
	    int main(int argc,char* argv[],char* envp[])

	  解析：
	    argc 	-命令行参数的个数;
	    argv	-记录每个命令行参数的首地址;
	    envp	-记录环境表的首地址;
	  注意:
	     由于历史等原因,main函数中的第三个参数不一定被系统所支持,
	    因此建议使用全局变量environ来访问环境表信息;















