/**************************************************************************/
*															    		  *	
*								day_08					   				  *	
*									   									  *
/**************************************************************************/




	1. 文件管理
	1.1 fcntl函数

       #include <unistd.h>
       #include <fcntl.h>

       int fcntl(int fd, int cmd, ... /* arg */ );


		第一个参数：文件描述符,open函数的返回值
		第二个参数；具体的操作命令
				F_DUPFD	-查找最小的 >= arg 的描述符作为fd的副本，与dup2不同的地方
						 在于：若arg已经被其他文件占用,则不会关闭而是查找哦啊>arg
						 的描述符进行复制；

				F_GETFD/F_SETFD	-获取/设置文件描述符的标志；
				
				F_GETFL/F_SETFL	-获取/设置文件的状态标志；

				F_SETLK/F_SETLKW/F_GETLK -实现加锁和解锁等功能；

		第三个参数：可边长参数，是否需要取决与cmd
			如果实现文件锁的功能，则需要一个指向以下结构体的指针:

           struct flock {
               ...
               short l_type;    /* Type of lock: F_RDLCK,
                                   F_WRLCK, F_UNLCK(解锁) */
               short l_whence;  /* How to interpret l_start:
                                   SEEK_SET, SEEK_CUR, SEEK_END */
               off_t l_start;   /* Starting offset for lock */
               off_t l_len;     /* Number of bytes to lock(加锁的长度) */
               pid_t l_pid;     /* PID of process blocking our lock(锁的进程号)
                                   (F_GETLK only) */
               ...
           };
		

		返回值：成功返回值取决与操作符:

	       F_DUPFD  The new descriptor.

	       F_GETFD  Value of file descriptor flags.

	       F_GETFL  Value of file status flags.

 	      All other commands
                Zero.
    	  On error, -1 is returned, and errno is set appropriately.


		函数功能：
			主要用于操作文件描述符，具体操作方式如下：
		
			a.复制文件描述符(了解)   File descriptor
			b.操作文件描述符的标志(了解)  File descriptor flags
			c.操作文件的状态标志(了解)  File status flags
			d.实现建议锁/文件锁的功能(重点)




	1.2 使用fcntl函数实现文件锁的功能
		(1)文件锁的由来
			当多个进程在同一时刻向同一个文件中的同一快区域写入不同数据时,可能会
	  	  造成文件数据的交错和混乱问题,理论上多个进程同时读文件可以同时进行,但是
		  只要有一个进程执行写操作，那么多个进程就不该同时进行，为了实现该效果，
		  需要借助文件锁机制。

			文件锁本质上就是读写锁，一把读锁和一把写锁,其中读锁是共享锁,允许其他
		  进程加读锁但不允许加写锁；而写锁是互斥锁,不允许其他进程加读锁和写锁；


		(2)使用F_SETLK作为函数第二个实参的用法:

			当锁的类型是F_RDLCK/F_WRLCK 实现加锁功能
			当锁的类型是F_UNLCK时  实现解锁的功能
			无论实现加锁还是解锁,具体的锁信息由第三个参数指定；


	【练习】
	vi 03lockB.c 文件 要求使用fcntl函数对文件a.txt中第三个字节起的前15个字节加
	写锁,判断是否加锁成功并打印结果；



	由03lockA.c 和 04test.c 程序结果可知;
		当文件被加完写锁时,依然是可以写入数据到文件中,由此可见,文件锁并不能真正
	锁定对文件的读写操作，只能锁定其他的锁,也就是导致第二次加锁失败(两个读锁除外).
			= > 君子协定


	/*解决方案：*/
		一般来说，在指向读写操作之前尝试加读写锁,根据能否进行加读写锁来决定
	  能否进行读写操作；



	释放锁的方式：
			a.将锁的类型改为F_UNLCK,重新使用fcntl函数进行设置即可;
			b.使用close函数关闭文件描述符时,与该描述符有关的文件锁全部释放;
			c.进程结束是会自动是否那个所有与该进程相关的文件锁;




		(3) 使用F_SETLKW作为函数的第二个实参时的用法

		  该参数的用法与F_SETLK相似,所不同的是当文件中已经存在一把冲突的锁时,
		并不会返回加锁失败,而是一直等待直到文件上的冲突锁被释放为止；


		(4)使用F_GETLK作为函数第二个实参是的用法

			如果第三个参数描述的锁信息可以加到文件上,则fcntl函数不会去加锁，
		  而是将锁的类型改为 F_UNLCK ，其他成员保持不变。
			如果第三个参数描述的锁信息不可以加到文件上,则fcntl函数会获取文件上
		  已经存在的锁信息,并用这些覆盖第三个参数原来描述的锁信息,也就是获取文件上
		  已经存在的锁信息。


		
	
	1.3 access函数

       #include <unistd.h>

       int access(const char *pathname, int mode);

		第一个参数：字符串形式的文件路径名
		第二个参数：具体的操作模式
			F_OK	-判断文件是否存在(/*重点*/)
			R_OK	-判断文件是否可读
			W_OK	-判断文件是否可写
			X_OK	-判断文件是否可执行


		函数功能：
			主要用于判断文件的存在性以及是否拥有相应的权限;


	1.4 stat/fstat函数(/*重点*/)

       #include <sys/types.h>
       #include <sys/stat.h>
       #include <unistd.h>

       int stat(const char *path, struct stat *buf);
       int fstat(int fd, struct stat *buf);

		第一个参数：字符串形式的文件路径名/文件描述符
		第二个参数：结构体指针，准备结构体变量去地址作为实参

			结构体类型如下：
           struct stat {

               mode_t    st_mode;    /* protection(文件类型和权限) */

               off_t     st_size;    /* total size, in bytes(文件大小)*/

               time_t    st_mtime;   /* time of last modification
												(最后一次修改时间) */
				... ...
           };



		函数功能：
			主要用于获取指定文件的状态信息，通过第二个参数带出来；




		获取文件大小的三种方法:
			a.fseek函数
			b.lseek函数
			c.stat函数



		扩展：

			#include<time.h>

 	      char *ctime(const time_t *timep);

		=> 主要用于将参数指定的整数时间转换为字符串类型时间并返回；
	


       struct tm *localtime(const time_t *timep);

		=> 主要用于将参数指定的整数时间转换为结构体指针类型的时间,
			其中结构体的类型如下:
							  
           struct tm {
               int tm_sec;         /* seconds */
               int tm_min;         /* minutes */
               int tm_hour;        /* hours */
               int tm_mday;        /* day of the month */
               int tm_mon;         /* month + 1 */
               int tm_year;        /* year + 1900 */

           };

				
	

		作业:
			自定义函数generator_id，实现每次执行程序时都可以不断地打印一个自动
		增长的整数值；














