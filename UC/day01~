/**************************************************************************/
*															              *	*							  day_01	                                  *	
*									                                      *
/**************************************************************************/


	1. 课程简介
	1.1 Unix/Linux系统下的基本命令
	    => 主要学习常用的基本命令 以及vi的基本操作
	    => 依赖于Unix/Linux系统，部分命令和windows系统相同

	    标准C语言
	   => C语言的基本语法知识;
	   => 不依赖与具体的操作系统，支持Unix/Linux/Windows系统

	    数据结构和算法
	  => 主要学习常见数据结构的特性以及常用的算法,理解思想
	  => 不依赖于具体的操作系统,支持Unix/Linux/Windows系统
	  => 不依赖于具体的变成语言,支持C/C++/...

	    Unix/Linux系统下的高级C编程
	  => 主要学习操作系统提供的API函数以及操作系统的部分原理;
	  => 依赖于具体的操作系统,支持Unix/Linux系统;
	  => 主要使用C语言进行编程
	  => 理论时间: 15 天

		目前主流的主机操作系统:Unix/Linux/windows系列
	    		windows系列:Xp系统、vista、win7、win8、win10

		目前主流的主机操作系统:Android/IOS/Windows phone

		

	1.2 UC课程简介

	    (1)Unix/Linux系统的概述以及编程基础;
	    (2)Unix/Linux系统的内存管理技术
	    (3)Unix/Linux系统下的文件管理以及目录操作;
	    (4)Unix/Linux系统下的进程管理技术;
	    (5)Unix/Linux系统下的信号处理技术;
	    (6)Unix/Linux系统下的进程间通信技术;
	    (7)Unix/Linux系统下的网络编程技术;
	    (8)Unix/Linux系统下的多线程开发技术;


**************************************************


	

	1. Unix和Linux系统简介
	1.1 Unix系统的简介
	    在1969年左右，编写操作系统使用汇编语言,在编写和维护时都非常不方便。
	贝尔实验室汤普逊研发了一们语言,叫做B语言,后期由丹尼斯-李奇做了修改和扩展,命名为 Nwe B语言,后来改名为C语言;
	    C语言诞生于1972年，至今在编程语言排行榜上占据重要的地位。
	    Unix系统诞生于1970年,具有支持多用户多任务以及多种处理器的特性;

	1.2 Linux系统的简介

		Linux系统是一款自由免费开放源代码的类 Unix操作系统;

		当前教学环境: ubuntu 12.04  32位操作系统

		ubuntu系统每半年(4月 10月)发布一个新版本;

		



	2. gcc编译器的使用
	2.1 基本概念
		gcc原名叫做GNU C Compiler(编译器),支持对C语言的编译链接，
	后来对编译器进行了扩展,支持了更多的编程语言,如C++、Object-c等，
	改名为 GNU Compiler Collection.

	2.2 基本功能
		目前主流的编程基本上都是使用高级语言进行,如C语言,
	但是高级语言编写的程序无法被计算机直接执行,需要先翻译成汇编语言,
	再翻译成机器指令,最后被计算机执行。
		
		为了实现高级语言代码到机器指令的翻译,
		则需要使用gcc编译器进行编译链接,而生成的过程主要分成以下四步:
	
		(1) 预编译/预处理
			-主要用于实现头文件的扩展以及宏替换;
			gcc -E 01hello.c -o 01hello.i
			//生成 01hello.i
		(2) 编译	
			-主要用于将高级语言代码翻译成汇编语言,得到汇编文件;
			gcc -S 01hello.i/01hello.c 
			//生成 01hello.s
		(3) 汇编
			-主要用于将汇编语言翻译成机器语言指令,得到目标文件;
			gcc -c 01hello.s/01hello.i/01hello.c
			//生成 01hello.o
		(4) 链接
			-主要将目标文件和库文件进行链接,得到可执行文件	
			gcc 01hello.o/01hello.s/01hello.i/01hello.c
			//生成a.out 可执行文件


【练习】
		
	cc -E 01hello.c -o 01hello.i
	cc -S 01hello.i/01hello.c
	cc -c 01hello.s/01hello.i/01hello.c
	cc 01hello.o/01hello.s/01hello.i/01hello.c



	2.3 常用的编译选项
	    (1)熟练掌握的选项
		gcc/cc -E 预处理,默认输出到屏幕,可以使用-o来指定输入文件(xxx.i)
		gcc/cc -S 编译,将高级语言文件翻译成汇编语言文件(xxx.s)
		gcc/cc -c 汇编,将汇编语言文件翻译成机器语言文件(xxx.o)
		gcc/cc 编译链接,默认生成a.out的可执行文件

	    (2)熟悉的选项
		gcc/cc -std 	指定执行的C标准(C89 C99)
		gcc/cc -v   	查看gcc的版本信息
		gcc/cc -Wall	尽可能显示所有的警告信息(Warning all)
		gcc/cc -Werror	将警告当作错误来处理 
				(Warning error)		

	    (3)了解选项
		gcc/cc -g	生成调试信息,可以进行GDB调试
		gcc/cc -x	显示指定源代码的编程语言		
		gcc/cc -O	对代码进行优化处理

	    (4)扩展的选项
		man  命令/函数/gcc -查看相关的命令/函数/gcc编译器




	2.4 常见的编程相关的文件后缀

		.h	-头文件
		.c	-源文件
		.i	-预处理文件
		.s	-汇编文件
		.o	-目标文件
		.a	-静态库文件
		.so	-共享库文件


	3. 多文件结构的编程
	3.1 多文件结构的主要组成
		.h	头文件,主要存放结构题的定义、函数的声明等
		.c	源文件,主要存放函数的定义等
		.a	静态库文件,主要对功能函数的打包
		.so	共享库文件,主要对功能函数的打包

	3.2 头文件的详细组成(重点)
	    (1)头文件的卫士
		#ifndef _xxx_H
		#define _xxx_H
		...
		#endif //_xxx_H

	    (2)包含其他头文件
		#include<stdio.h>
		...

	    (3)进行宏定义
		#define  PI  3.14

	    (4)进行结构题的定义以及对数据类型起别名
		typedef struct node{
			int data;
			struct node* next;
		}Node;

	    (5)外部变量和函数的声明
		exter int num;
		void show(void);
	    

*****************************

	作业:
		(1)创建目录circle,在circle目录中编写以下3个文件

		circle.h -声明计算圆形周长和面积的函数,函数分别为:
			circle_length 和 circle_area;
		circle.c -定义原型周长和面积的函数;
		main.c	 -定义main函数,调用计算周长和面积的函数,其中半径由用户手动输入；	
































