/**************************************************************************/
*																	      *		
*								day_03					   	              *	
*																          *
/**************************************************************************/



	一、库文件
	二、C语言中的错误处理


				/*库文件*/

	1. 库文件的概念和使用

	    在大型项目中,如果每个功能函数都放在独立的.o文件中,
	  则项目的管理是灾难性的问题,因此需要采用库文件来解决该问题;    
	    一般来说,可以按照功能模块将若干个.o文件打包成一个或者多个库文件,
	  编写者只需要提供库文件和头文件即可;

	库文件主要分为两大类:静态库文件(.a) 和 共享库文件(.so)

	1.1 静态库的基本概念和特性
	    (1)基本概念
		静态库本质上就是由若干个.o文件打包生成的.a文件;

		链接静态库的本质就是将被调用的代码指令复制到调用模块中,
		体现在最终的可执行文件中;

	    (2)基本特性

		a.静态库占用空间比较大,库中的代码一旦修改则必须重新链接;
		b.使用静态库的代码在运行可执行文件时可以脱离静态库,
		  并且执行的效率比较高;
		





/*printf 的函数声明在stdio.h里面
	它的定义源代码在哪?    

使用命令 ldd a.out 查看		
	linux-gate.so.1 =>  (0xb7706000)
	libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xb754b000)
	/lib/ld-linux.so.2 (0xb7707000)

	由上可知printf函数的定义被打包在上面.so的共享库中了~~~
	运行自动链接共享库 生成a.out
*/

使用cc -static 01static.c -o b.out 强制链接静态库生成可执行文件b.out
0使用ls -l *.out 对比a.out和b.out的文件大小
-rwxrwxr-x 1 tarena tarena   7202  4月  8 09:59 a.out
-rwxrwxr-x 1 tarena tarena 743664  4月  8 10:06 b.out
	
	显然静态库生成的可执行文件b.out 占用内存空间更大！

	NOTE：gcc/cc -static xxx.c 表示强制要求链接静态库
	      ldd a.out 表示查看a.out所链接的共享库信息




	1.2 静态库的生成和调用步骤
		
	    (1)生成步骤
		a.编写源代码文件xxx.c,如: vi add.c
		b.只编译不链接生成目标文件xxx.o,如:
			cc -c add.c
		c.生成静态库文件
		  ar -r/*插入，若存在则更新*/ lib库名.a 目标文件
 	   //e.g. ar -r libadd.a add.o

	NOTE:
		其中libadd.a 叫做//静态库文件名
		其中去掉lib和.a之后剩下的add叫做//库名		
		

	    (2)调用步骤
		a.编写测试源代码文件xxx.c,如：vi main.c
		b.只编译不链接生成目标文件xxx.o,如：
			cc -c main.c
		c.链接静态库文件,链接的方式有以下三种：
		  1)直接链接
			cc 目标文件 静态库文件名
		//e.g.  cc main.c libadd.a

		  2)使用编译选项进行链接
			cc 目标文件 -l 库名 -L 库文件所在的路径
		//e.g.  cc main.o -l add -L .

		  3)配置环境变量LIBRARY_PATH
			export LIBRARY_PATH=$LIBRARY_PATH:.
		//e.g.  export LIBRARY_PATH=$LIBRARY_PATH:.
		//	cc main.o -l add


	练习:
		用上面三种方法生成静态库文件



	1.3 共享库文件的基本概念和特征
	    (1) 基本概念
		共享库本质就是由若干个目标文件(.o)打包生成的.so文件
		
		链接共享库和静态库最大的不同就是,链接共享库时并不需要将
	    被调用的代码指令复制到调用模块中,而仅仅是将被调用的代码指令在
	    共享库中的相对地址嵌入到调用模块中;	

	    (2)基本特性
		a.共享库占用空间比较小,即使修改了库中的代码,
	    只要接口保持不变,则不需要重新链接;
		b.使用共享库的代码在运行是需要以来共享库,执行效率相对比较低;
		
		目前主流的商业开发中大多数采用共享库;

	1.4 共享库的生成和调用步骤
		
	    (1)生成步骤
		a.编写源代码文件xxx.c,如：vi add.c
		b.只编译不链接生成目标文件xxx.o,如:
			cc -c -fpic/*生成位置无关码 小模式*/ add.c
		
		c.生成共享库文件
			cc -shared 目标文件 -o lib库名.so
		//e.g.  cc -shared add.o  -o libadd.so	



/*
ls -l libadd.so
-rwxrwxr-x 1 tarena tarena 6754  4月  8 11:58 libadd.so

-表示文件
r读权限
w写权限
x运行权限

ls -l libadd.a
-rw-rw-r-- 1 tarena tarena 2042  4月  8 14:04 libadd.a

*/
	
	    (2)调用步骤

		a.编写测试源代码文件xxx.c,如：vi main.c
		b.只编译不链接生成目标文件xxx.o,如：
			cc -c main.c
		c.链接共享库文件,链接的方式有以下三种：
		  1)直接链接
			cc 目标文件 共享库文件名
		//e.g.  cc main.c libadd.so
0
		  2)使用编译选项进行链接
			cc 目标文件 -l 库名 -L 库文件所在的路径
		//e.g.  cc main.o -l add -L .

		  3)配置环境变量LIBRARY_PATH
			export LIBRARY_PATH=$LIBRARY_PATH:.
		//e.g.  export LIBRARY_PATH=$LIBRARY_PATH:.
		//	cc main.o -l add


	NOTE：
		1)在使用共享库文件时,需要配置环境变量LD_LIBRARY_PATH来解决运行时
	    找不到库文件的问题,具体的配置方法如下:
	//	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.
	
		2)当共享库文件和静态库文件同时在一个目录下，并且库名相同时，
	    采用上述第二种或者第三种链接方式进行链接时,编译器会有限选择共享库
	    进行链接,如果希望链接静态库则使用-static 选项进行要求;

		/* gcc/cc -static xxx.c 表示强制要求链接静态库 */
		



	1.5 共享库的动态加载
		#include <dlfcn.h>
		Link with -ldl.
	    (1) dlopen函数

		void *dlopen(const char *filename, int flag);
	
		第一个参数: 字符串形式的共享库文件名
		第二个参数: 具体的操作标志,加载方式
		    RTLD_LAZY  	-延迟加载
		    RTLD_NOW	-立即加载
		返回值:成功返回一个句柄(地址)信息,失败返回 NULL;            

	    函数功能:
		主要用于将参数filename指定的共享库文件加载到内存中;


	    (2) dlsym 函数

		void *dlsym(void *handle, const char *symbol);

		第一个参数:具体的句柄信息,也就是dlopen函数的返回值
		第二个参数:字符串形式的符号名,这里指函数名

		返回值:成功返回函数的地址,失败返回 NULL;

		函数功能:
		    主要用于查找handle指向共享库中名字为symbol的函数在内存中的
		    地址信息;

		
	    (3) dlclose 函数

		 int dlclose(void *handle);

		函数功能:
		    主要用于关闭/写在参数指定的共享库,参数为dlopen函数的返回值,
		  成功返回0，失败返回非0；
	
	    (4) dlerror 函数
		
		char *dlerror(void);

		函数功能:
		    主要用于获取调用dlopen()/dlsym()/dlclose()函数之后产生的错误
		信息并返回,如果上述函数没有产生错误,则返回 NULL;



***************************
	作业:
	     自定义两个函数,分别打印空心菱形和实心菱形，放在同一个.c文件中,
	将该文件分别打包成静态库文件和共享库文件使用main.c文件进行调用,
	最后使用动态加载方式进行加载
       *                     *
      * *                   ***
     *   *                 *****
      * *                   ***
       *                     *




      12345                 12345
1       *                     *		1
2      * *                   ***	2
3     *   *                 *****	3
4      * *                   ***	4	
5       *                     *		5





















