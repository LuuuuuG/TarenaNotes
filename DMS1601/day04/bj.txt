五、数据采集服务器
...
5.类图
------------------------------------------------------------------
线程封装
class Thread {
public:
    // 启动
    void start (void) {
        pthread_create (&m_tid, NULL, run, this);
    }
    // 终止
    // 睡眠
    // 唤醒
    // ...
private:
    // 任务
    static void* run (void* arg) {
        return (Thread*)arg->run ();
    }
    virtual void* run (void) = 0;
    pthread_t m_tid; // 线程标识
};
class MyThread : public Thread {
    void* run (void) {
        ...
    }
};
MyThread thread;
thread.start ();
------------------------------------------------------------------
6.时序图
7.编写代码
六、定时自动运行数据采集客户机
crontab -e
A B C D E <命令>
操作系统每隔一分钟都会自动检查crontab配置文件中的条目，只要当前系统时间符合该条目中定义的时间规则，即执行条目中的命令。
A: 分钟，[0,59]
B: 小时，[0,23]
C: 天，[1,31]
D: 月，[1,12]
E: 星期，[0,6]，0表示星期日
*: 通配符，代表任意，即无约束
30 12 1 5 3 <命令>
15 * * * 1-5 <命令>
0,30 1,3,5 * * 1-5 <命令>
* * * * * <命令>
0 * * * * <命令>
0 0 * * * <命令>
七、为数据采集客户机增加GUI
QThread - 线程基类
    start - 启动线程
    static run - 线程过程
    virtual run = 0 - 线程任务
MyThread <- QThread
    virtual run { ... } - 线程任务
八、为数据采集服务器增加Pro*C代码
proc oracledao.pc oname=oracledao.cpp parse=none code=cpp
ORA-1034
oerr ora 1034
九、项目总结
1.基于UML统一建模语言的面向对象设计技术；
2.C/C++语言编程技术；
3.Shell脚本语言编程技术；
4.Linux/Unix操作系统编程技术；
5.基于Pro*C/C++的Oracle数据库编程技术；
6.基于Socket(套接字)的网络编程技术；
7.POSIX多线程及其同步技术；
8.基于Qt的图形用户界面技术；
9.STL标准模板库技术。
技术难点、团队协作、经验教训、展望未来